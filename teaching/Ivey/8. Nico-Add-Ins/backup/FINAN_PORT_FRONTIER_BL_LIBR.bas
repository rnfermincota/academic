Attribute VB_Name = "FINAN_PORT_FRONTIER_BL_LIBR"

Option Explicit     'Requires that all variables to be declared explicitly.
Option Base 1       'The "Option Base" statement allows to specify 0 or 1 as the
                    'default first index of arrays.


'************************************************************************************
'************************************************************************************
'FUNCTION      : PORT_BLACK_LITTERMAN_FRONTIER_FUNC
'DESCRIPTION   : Returns coefficients for an optimal allocation with Short Sales
'LIBRARY       : PORTFOLIO
'GROUP         : FRONTIER_BLACK_LITTERMAN
'ID            : 001
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 21/01/2009
'************************************************************************************
'************************************************************************************
'PORT_WITH_SHORT_OPTIMIZER_FUNC

Function PORT_BLACK_LITTERMAN_FRONTIER_FUNC(ByRef DATA_RNG As Variant, _
ByVal MIN_CASH_RATE As Double, _
ByVal MAX_CASH_RATE As Double, _
ByVal DELTA_CASH_RATE As Double, _
Optional ByVal BASE_CASH_RATE As Double = 0, _
Optional ByVal COUNT_BASIS As Double = 252, _
Optional ByVal TRANS_OPT As Integer = 0, _
Optional ByVal DATA_TYPE As Integer = 0, _
Optional ByVal LOG_SCALE As Integer = 0)
  
'BASE_CASH_RATE = Cash Rate; Borrowing Rate Annualized
  
Dim i As Long
Dim NSIZE As Long
Dim TRATE_VAL As Double

Dim TEMP_MATRIX As Variant
Dim TEMP_VECTOR As Variant

Dim BASE_WEIGHTS_VECTOR As Variant
Dim DELTA_WEIGHTS_VECTOR As Variant

On Error GoTo ERROR_LABEL

NSIZE = (MAX_CASH_RATE - MIN_CASH_RATE) / DELTA_CASH_RATE + 1

ReDim TEMP_MATRIX(1 To 5, 1 To NSIZE + 2)

TEMP_MATRIX(1, 1) = "CASH RATE"
TEMP_MATRIX(2, 1) = "MEAN"
TEMP_MATRIX(3, 1) = "SIGMA"
TEMP_MATRIX(4, 1) = "COVAR"
TEMP_MATRIX(5, 1) = "CORREL"

BASE_WEIGHTS_VECTOR = PORT_BLACK_LITTERMAN_FRONTIER_OPTIMIZER_FUNC(DATA_RNG, _
              BASE_CASH_RATE, COUNT_BASIS, _
              TRANS_OPT, DATA_TYPE, LOG_SCALE, 0)

TEMP_VECTOR = PORT_BLACK_LITTERMAN_FRONTIER_MOMENTS_FUNC(DATA_RNG, BASE_CASH_RATE, _
              BASE_WEIGHTS_VECTOR, COUNT_BASIS, TRANS_OPT, _
              DATA_TYPE, LOG_SCALE)

TEMP_MATRIX(1, 2) = BASE_CASH_RATE
TEMP_MATRIX(2, 2) = TEMP_VECTOR(1, 2)
TEMP_MATRIX(3, 2) = TEMP_VECTOR(2, 2)
TEMP_MATRIX(4, 2) = ""
TEMP_MATRIX(5, 2) = ""

TRATE_VAL = MIN_CASH_RATE

For i = 1 To NSIZE
  TEMP_MATRIX(1, i + 2) = TRATE_VAL
  DELTA_WEIGHTS_VECTOR = PORT_BLACK_LITTERMAN_FRONTIER_OPTIMIZER_FUNC(DATA_RNG, TEMP_MATRIX(1, i + 2), COUNT_BASIS, TRANS_OPT, DATA_TYPE, LOG_SCALE, 0)
  TEMP_VECTOR = PORT_BLACK_LITTERMAN_FRONTIER_MOMENTS_FUNC(DATA_RNG, 0, DELTA_WEIGHTS_VECTOR, COUNT_BASIS, TRANS_OPT, DATA_TYPE, LOG_SCALE)
  TEMP_MATRIX(2, i + 2) = TEMP_VECTOR(1, 2)
  TEMP_MATRIX(3, i + 2) = TEMP_VECTOR(2, 2)
  TEMP_MATRIX(4, i + 2) = PORT_COVAR_FUNC(DATA_RNG, BASE_WEIGHTS_VECTOR, DELTA_WEIGHTS_VECTOR, COUNT_BASIS, TRANS_OPT, DATA_TYPE, LOG_SCALE)
  TEMP_MATRIX(5, i + 2) = PORT_BIVAR_CORREL_FUNC(TEMP_MATRIX(4, i + 2), TEMP_MATRIX(3, 2), TEMP_MATRIX(3, i + 2))
  TRATE_VAL = TRATE_VAL + DELTA_CASH_RATE
Next i

PORT_BLACK_LITTERMAN_FRONTIER_FUNC = TEMP_MATRIX

Exit Function
ERROR_LABEL:
PORT_BLACK_LITTERMAN_FRONTIER_FUNC = Err.number
End Function


'************************************************************************************
'************************************************************************************
'FUNCTION      : PORT_BLACK_LITTERMAN_FRONTIER_MOMENTS_FUNC
'DESCRIPTION   : Returns the portfolio mean, standard deviation, and thetha (with
'short sales allow)
'LIBRARY       : PORTFOLIO
'GROUP         : FRONTIER_BLACK_LITTERMAN
'ID            : 002
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 21/01/2009
'************************************************************************************
'************************************************************************************

Function PORT_BLACK_LITTERMAN_FRONTIER_MOMENTS_FUNC(ByRef DATA_RNG As Variant, _
Optional ByVal CASH_RATE As Double = 0, _
Optional ByRef WEIGHTS_RNG As Variant, _
Optional ByVal COUNT_BASIS As Double = 252, _
Optional ByVal TRANS_OPT As Integer = 0, _
Optional ByVal DATA_TYPE As Integer = 1, _
Optional ByVal LOG_SCALE As Integer = 0)

'CASH_RATE = Cash Rate; Borrowing Rate Annualized


'---------------------------------------------------------------------------------
'---------------------------------------------------------------------------------
'---------------------------------------------------------------------------------

'REFERENCE: the Black-Litterman Model ... for Portfolio Allocation
'http://papers.ssrn.com/sol3/papers.cfm?abstract_id=334304

'Abstract of the paper implemented in the function:

'With the following functions we demonstrate that the optimal portfolios
'generated by the Black-Litterman asset allocation model

'Properties of the Black-Litterman Model

'The unconstrained optimal portfolio in the Black-Litterman model is the scaled
'market equilibrium portfolio (reflecting the uncertainty in the equilibrium
'expected returns) plus a weighted sum of portfolios representing the investor's
'views. The weight on a portfolio representing a view is positive when the view
'is more bullish than the one implied by the equilibrium and the other views. The
'weight increases as the investor becomes more bullish on the view, and the magnitude
'of the weight also increases as the investor becomes more confident about the view.


' Managing Director
' The Goldman Sachs Group, Inc. - Quantitative Strategy Group
' 32 Old Slip, 24th Floor
' New York, NY 10005
' United States
' bob.litterman@gs.com

'---------------------------------------------------------------------------------
'---------------------------------------------------------------------------------
'---------------------------------------------------------------------------------

Dim j As Long
Dim NSIZE As Long
  
Dim COVAR_MATRIX As Variant
Dim MEAN_VECTOR As Variant
Dim WEIGHTS_VECTOR As Variant

Dim TEMP_SUM As Double

Dim DATA_MATRIX As Variant
Dim TEMP_VECTOR As Variant
Dim TEMP_MATRIX As Variant

On Error GoTo ERROR_LABEL
  
DATA_MATRIX = DATA_RNG
If TRANS_OPT <> 0 Then DATA_MATRIX = MATRIX_REVERSE_FUNC(DATA_MATRIX)
If DATA_TYPE <> 0 Then DATA_MATRIX = MATRIX_PERCENT_FUNC(DATA_MATRIX, LOG_SCALE)

NSIZE = UBound(DATA_MATRIX, 2)

COVAR_MATRIX = MATRIX_COVARIANCE_FRAME1_FUNC(DATA_MATRIX, 0, 0)
MEAN_VECTOR = MATRIX_TRANSPOSE_FUNC(MATRIX_MEAN_FUNC(DATA_MATRIX))
For j = 1 To NSIZE: MEAN_VECTOR(j, 1) = MEAN_VECTOR(j, 1) * COUNT_BASIS - CASH_RATE: Next j
If IsArray(WEIGHTS_RNG) = False Then
    TEMP_VECTOR = MATRIX_TRANSPOSE_FUNC(MMULT_FUNC(MATRIX_LU_INVERSE_FUNC(COVAR_MATRIX), MEAN_VECTOR)) 'SHORT SELLING IS ALLOWED
    TEMP_SUM = 0
    For j = 1 To NSIZE: TEMP_SUM = TEMP_SUM + TEMP_VECTOR(1, j): Next j
    ReDim WEIGHTS_VECTOR(1 To 1, 1 To NSIZE)
    For j = 1 To NSIZE: WEIGHTS_VECTOR(1, j) = TEMP_VECTOR(1, j) / TEMP_SUM: Next j
Else
  WEIGHTS_VECTOR = WEIGHTS_RNG
  If UBound(WEIGHTS_VECTOR, 2) = 1 Then: WEIGHTS_VECTOR = MATRIX_TRANSPOSE_FUNC(WEIGHTS_VECTOR): End If
End If

ReDim TEMP_MATRIX(1 To 3, 1 To 2)

TEMP_MATRIX(1, 1) = ("PORT MEAN")
TEMP_MATRIX(2, 1) = ("PORT SIGMA")
TEMP_MATRIX(3, 1) = ("PORT THETA")

TEMP_VECTOR = MMULT_FUNC(WEIGHTS_VECTOR, MEAN_VECTOR)
TEMP_MATRIX(1, 2) = TEMP_VECTOR(1, 1) 'PORT_MEAN
TEMP_VECTOR = MMULT_FUNC(COVAR_MATRIX, MATRIX_TRANSPOSE_FUNC(WEIGHTS_VECTOR))
TEMP_VECTOR = MMULT_FUNC(WEIGHTS_VECTOR, TEMP_VECTOR)
TEMP_MATRIX(2, 2) = TEMP_VECTOR(1, 1) ^ 0.5 * Sqr(COUNT_BASIS) 'PORT ST_DEVIATION
TEMP_MATRIX(3, 2) = (TEMP_MATRIX(1, 2) - CASH_RATE) / TEMP_MATRIX(2, 2) 'PORT_THETA

PORT_BLACK_LITTERMAN_FRONTIER_MOMENTS_FUNC = TEMP_MATRIX

Exit Function
ERROR_LABEL:
PORT_BLACK_LITTERMAN_FRONTIER_MOMENTS_FUNC = Err.number
End Function

'************************************************************************************
'************************************************************************************
'FUNCTION      : PORT_BLACK_LITTERMAN_FRONTIER_OPTIMIZER_FUNC
'DESCRIPTION   : Optimal Port Weights with Short Sales Allowed
'LIBRARY       : PORTFOLIO
'GROUP         : FRONTIER_BLACK_LITTERMAN
'ID            : 003
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 21/01/2009
'************************************************************************************
'************************************************************************************
'PORT_WITH_SHORT_ALLOCATION_FUNC

Function PORT_BLACK_LITTERMAN_FRONTIER_OPTIMIZER_FUNC(ByRef DATA_RNG As Variant, _
Optional ByVal CASH_RATE As Double = 0, _
Optional ByVal COUNT_BASIS As Double = 252, _
Optional ByVal TRANS_OPT As Integer = 0, _
Optional ByVal DATA_TYPE As Integer = 0, _
Optional ByVal LOG_SCALE As Integer = 0, _
Optional ByVal OUTPUT As Integer = 1)

'CASH_RATE = Cash Rate; Borrowing Rate Annualized

Dim j As Long

Dim NSIZE As Long
Dim TEMP_SUM As Double
  
Dim MEAN_VECTOR As Variant
Dim BASE_WEIGHTS_VECTOR As Variant
Dim COVARIANCE_MATRIX As Variant

Dim DATA_MATRIX As Variant
Dim DELTA_WEIGHTS_VECTOR As Variant

On Error GoTo ERROR_LABEL

DATA_MATRIX = DATA_RNG
If TRANS_OPT <> 0 Then DATA_MATRIX = MATRIX_REVERSE_FUNC(DATA_MATRIX)
If DATA_TYPE <> 0 Then DATA_MATRIX = MATRIX_PERCENT_FUNC(DATA_MATRIX, LOG_SCALE)

NSIZE = UBound(DATA_MATRIX, 2)

COVARIANCE_MATRIX = MATRIX_COVARIANCE_FRAME1_FUNC(DATA_MATRIX, 0, 0)
MEAN_VECTOR = MATRIX_TRANSPOSE_FUNC(MATRIX_MEAN_FUNC(DATA_MATRIX))
For j = 1 To NSIZE: MEAN_VECTOR(j, 1) = MEAN_VECTOR(j, 1) * COUNT_BASIS - CASH_RATE: Next j
DELTA_WEIGHTS_VECTOR = MATRIX_TRANSPOSE_FUNC(MMULT_FUNC(MATRIX_LU_INVERSE_FUNC(COVARIANCE_MATRIX), MEAN_VECTOR)) 'SHORT SELLING IS ALLOWED
TEMP_SUM = 0: For j = 1 To NSIZE: TEMP_SUM = TEMP_SUM + DELTA_WEIGHTS_VECTOR(1, j): Next j
ReDim BASE_WEIGHTS_VECTOR(1 To NSIZE, 1 To 1)
For j = 1 To NSIZE: BASE_WEIGHTS_VECTOR(j, 1) = DELTA_WEIGHTS_VECTOR(1, j) / TEMP_SUM: Next j

Select Case OUTPUT
Case 0
      PORT_BLACK_LITTERMAN_FRONTIER_OPTIMIZER_FUNC = BASE_WEIGHTS_VECTOR
Case Else
      PORT_BLACK_LITTERMAN_FRONTIER_OPTIMIZER_FUNC = MATRIX_TRANSPOSE_FUNC(BASE_WEIGHTS_VECTOR)
End Select
        
Exit Function
ERROR_LABEL:
PORT_BLACK_LITTERMAN_FRONTIER_OPTIMIZER_FUNC = Err.number
End Function
