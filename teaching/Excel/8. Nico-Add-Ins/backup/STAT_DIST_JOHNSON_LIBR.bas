Attribute VB_Name = "STAT_DIST_JOHNSON_LIBR"

Option Explicit     'Requires that all variables to be declared explicitly.
Option Base 1       'The "Option Base" statement allows to specify 0 or 1 as the
                    'default first index of arrays.

Private PUB_INITIAL_FLAG As Boolean
Private PUB_JOHNSON_VERSION As Integer
Private PUB_JOHNSON_TARGET As Double
Private Const PUB_EPSILON As Double = 2 ^ 52 '1E-100

'************************************************************************************
'************************************************************************************
'FUNCTION      : FIT_JOHNSON_DISTRIBUTION1_FUNC [using an invented density function]

'DESCRIPTION   : In this function I provide one candidate approximation for
'the return of an asset, Type II Johnson distribution, which is a member of the
'Johnson (1949) family.

'My inspiration for the approximation techniques is that
'the Johnson distribution has been applied to the pricing
'of Arithmetic Asian options — at its essence the same problem — with
'excellent results. Type II Johnson has four degrees of freedom,
'which leads to four moment matching. Not surprisingly, the
'Johnson approximation provides results that are more accurate than
'the Reciprocal Gamma Approximation, given the two extra degrees of freedom.
'In fact, the Johnson approximation is remarkably indistinguishable from the
'Monte Carlo simulation. Of course, matching four moments requires more
'effort, which is why we suggest the two methods of differing complexity.

'• J(x | a, b, c, d) := The cdf of the (Type II) Johnson distribution
'• a, b, c, d := The four free parameters of the Johnson distribution.

'References:

'N. L. Johnson. “Systems of Frequency Curves Generated by Methods of
'Translation”. Biometrika, 36:149—176, 1949.

'S. E. Posner and M. A. Milevsky. “Valuing Exotic Options by Approximating
'the SPD with Higher Moments”. Journal of Financial Engineering, 7(2):109—125,
'June 1998.
'-----------------------------------------------------------------------------------

'LIBRARY       : STATISTICS
'GROUP         : DIST_JOHNSON
'ID            : 001
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 01/22/2009
'************************************************************************************
'************************************************************************************

Function FIT_JOHNSON_DISTRIBUTION1_FUNC(ByRef DATA_RNG As Variant, _
ByVal TARGET_RETURN As Double, _
ByRef PARAM_RNG As Variant, _
Optional ByVal BIN_MIN As Double = 0, _
Optional ByVal BIN_MAX As Double = 0, _
Optional ByVal BIN_WIDTH As Double = 0, _
Optional ByVal DATA_TYPE As Integer = 1, _
Optional ByVal LOG_SCALE As Integer = 0, _
Optional ByVal OUTPUT As Integer = 0)

Dim i As Long
Dim NBINS As Long

Dim A_VAL As Double
Dim B_VAL As Double
Dim M_VAL As Double
Dim S_VAL As Double

Dim ATEMP_SUM As Double
Dim BTEMP_SUM As Double

Dim TEMP_MATRIX As Variant
Dim FREQUENCY_VECTOR As Variant
Dim DATA_VECTOR As Variant
Dim PARAM_VECTOR As Variant

Dim PROB_SUM As Double
Dim ERROR_SUM As Double

Dim TEMP_STR As String

On Error GoTo ERROR_LABEL

DATA_VECTOR = DATA_RNG
If UBound(DATA_VECTOR, 1) = 1 Then
    DATA_VECTOR = MATRIX_TRANSPOSE_FUNC(DATA_VECTOR)
End If
If DATA_TYPE <> 0 Then
    DATA_VECTOR = MATRIX_PERCENT_FUNC(DATA_VECTOR, LOG_SCALE)
End If

If BIN_WIDTH = 0 Or BIN_MIN = 0 Or BIN_MAX = 0 Then
    BIN_MIN = 2 ^ 52: BIN_MAX = -2 ^ 52
    For i = LBound(DATA_VECTOR) To UBound(DATA_VECTOR)
        If DATA_VECTOR(i, 1) < BIN_MIN Then: BIN_MIN = DATA_VECTOR(i, 1)
        If DATA_VECTOR(i, 1) > BIN_MAX Then: BIN_MAX = DATA_VECTOR(i, 1)
    Next i
    NBINS = UBound(DATA_VECTOR, 1)
    FREQUENCY_VECTOR = HISTOGRAM_BIN_LIMITS_FUNC(BIN_MIN, BIN_MAX, NBINS, 3)
    BIN_WIDTH = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR))
    BIN_MIN = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR) + 1)
    NBINS = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR) + 2)
End If
FREQUENCY_VECTOR = HISTOGRAM_FREQUENCY_FUNC(DATA_VECTOR, NBINS, BIN_MIN, BIN_WIDTH, 1)
NBINS = UBound(FREQUENCY_VECTOR, 1)

PARAM_VECTOR = PARAM_RNG
If UBound(PARAM_VECTOR, 1) = 1 Then
    PARAM_VECTOR = MATRIX_TRANSPOSE_FUNC(PARAM_VECTOR)
End If

If OUTPUT <> 0 Then
    PUB_JOHNSON_TARGET = TARGET_RETURN
    FIT_JOHNSON_DISTRIBUTION1_FUNC = NELDER_MEAD_OPTIMIZATION2_FUNC("JOHNSON_DISTRIBUTION_ERROR1_FUNC", _
                                  FREQUENCY_VECTOR, PARAM_VECTOR)
    Exit Function
End If

A_VAL = PARAM_VECTOR(1, 1)
B_VAL = PARAM_VECTOR(2, 1)
M_VAL = PARAM_VECTOR(3, 1)
S_VAL = PARAM_VECTOR(4, 1)

ReDim TEMP_MATRIX(0 To NBINS, 1 To 9)

ATEMP_SUM = 0
BTEMP_SUM = 0

TEMP_MATRIX(0, 1) = "[X]"
TEMP_MATRIX(0, 2) = "U=(X-M)/S"
TEMP_MATRIX(0, 3) = "Z = DF/DX"
TEMP_MATRIX(0, 4) = "G(U)"
TEMP_MATRIX(0, 5) = "F(U)"
TEMP_MATRIX(0, 6) = "FREQ"
TEMP_MATRIX(0, 8) = "N[Z](SCALED)"

For i = 1 To NBINS Step 1
    TEMP_MATRIX(i, 1) = FREQUENCY_VECTOR(i, 1)
    TEMP_MATRIX(i, 2) = (TEMP_MATRIX(i, 1) - M_VAL) / S_VAL
    TEMP_MATRIX(i, 4) = JOHNSON_DISTRIBUTION_1G_FUNC(TEMP_MATRIX(i, 2), A_VAL, B_VAL)
    TEMP_MATRIX(i, 5) = JOHNSON_DISTRIBUTION_1F_FUNC(TEMP_MATRIX(i, 4))
    TEMP_MATRIX(i, 6) = FREQUENCY_VECTOR(i, 2)
    BTEMP_SUM = BTEMP_SUM + TEMP_MATRIX(i, 6)
Next i

For i = NBINS - 1 To 1 Step -1
    TEMP_MATRIX(i, 3) = (TEMP_MATRIX(i + 1, 5) - TEMP_MATRIX(i, 5)) / (TEMP_MATRIX(i + 1, 1) - TEMP_MATRIX(i, 1))
    ATEMP_SUM = ATEMP_SUM + TEMP_MATRIX(i, 3)
Next i

PROB_SUM = 0
ERROR_SUM = 0

For i = NBINS To 1 Step -1
    TEMP_MATRIX(i, 7) = Abs((TEMP_MATRIX(i, 3) / ATEMP_SUM) - (TEMP_MATRIX(i, 6) / BTEMP_SUM))
    ERROR_SUM = ERROR_SUM + TEMP_MATRIX(i, 7)
    TEMP_MATRIX(i, 8) = TEMP_MATRIX(i, 4) / ATEMP_SUM
    If i <> NBINS Then
        If (TEMP_MATRIX(i, 1) < TARGET_RETURN) And (TEMP_MATRIX(i + 1, 1) >= TARGET_RETURN) Then
            TEMP_MATRIX(i, 9) = TEMP_MATRIX(i, 5) + (TEMP_MATRIX(i + 1, 5) - TEMP_MATRIX(i, 5)) * _
            (TARGET_RETURN - TEMP_MATRIX(i, 1)) / (TEMP_MATRIX(i + 1, 1) - TEMP_MATRIX(i, 1))
        Else
            TEMP_MATRIX(i, 9) = 0
        End If
    End If
    PROB_SUM = PROB_SUM + TEMP_MATRIX(i, 9)
Next i

TEMP_STR = "N[z]-Freq (Scaled)- Avg. Error: " & Format(ERROR_SUM / NBINS, "0.0000%")
TEMP_MATRIX(0, 7) = TEMP_STR

TEMP_STR = "Prob[return < " & Format(TARGET_RETURN, "0.0000%") & "] = " & Format(PROB_SUM, "0.00%")
TEMP_MATRIX(0, 9) = TEMP_STR

FIT_JOHNSON_DISTRIBUTION1_FUNC = TEMP_MATRIX

Exit Function
ERROR_LABEL:
FIT_JOHNSON_DISTRIBUTION1_FUNC = Err.number
End Function

'************************************************************************************
'************************************************************************************
'FUNCTION      : JOHNSON_DISTRIBUTION_1G_FUNC
'DESCRIPTION   : John Distribution invented G objective function
'LIBRARY       : STATISTICS
'GROUP         : DIST_JOHNSON
'ID            : 003
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 01/22/2009
'************************************************************************************
'************************************************************************************

Private Function JOHNSON_DISTRIBUTION_1G_FUNC(ByVal DATA_VAL As Double, _
ByVal A_VAL As Double, _
ByVal B_VAL As Double)
On Error GoTo ERROR_LABEL
JOHNSON_DISTRIBUTION_1G_FUNC = DATA_VAL + (A_VAL * DATA_VAL ^ 2) + (B_VAL * DATA_VAL ^ 3)
Exit Function
ERROR_LABEL:
JOHNSON_DISTRIBUTION_1G_FUNC = Err.number
End Function


'************************************************************************************
'************************************************************************************
'FUNCTION      : JOHNSON_DISTRIBUTION_1F_FUNC
'DESCRIPTION   : John Distribution invented F objective function
'LIBRARY       : STATISTICS
'GROUP         : DIST_JOHNSON
'ID            : 004
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 01/22/2009
'************************************************************************************
'************************************************************************************

Private Function JOHNSON_DISTRIBUTION_1F_FUNC(ByVal G_VAL As Double)
On Error GoTo ERROR_LABEL
JOHNSON_DISTRIBUTION_1F_FUNC = (1 / (1 + Exp(-2 * G_VAL)))
Exit Function
ERROR_LABEL:
JOHNSON_DISTRIBUTION_1F_FUNC = Err.number
End Function

'************************************************************************************
'************************************************************************************
'FUNCTION      : JOHNSON_DISTRIBUTION_ERROR1_FUNC [using an invented density function]
'DESCRIPTION   : John Distribution Error Function
'LIBRARY       : STATISTICS
'GROUP         : DIST_JOHNSON
'ID            : 005

'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 01/22/2009
'************************************************************************************
'************************************************************************************

Private Function JOHNSON_DISTRIBUTION_ERROR1_FUNC(ByRef FREQUENCY_VECTOR As Variant, _
ByRef PARAM_VECTOR As Variant)

Dim i As Long
Dim NBINS As Long

Dim A_VAL As Double
Dim B_VAL As Double
Dim M_VAL As Double
Dim S_VAL As Double

Dim ATEMP_SUM As Double
Dim BTEMP_SUM As Double
Dim CTEMP_SUM As Double

Dim TEMP_MATRIX As Variant

Dim PROB_SUM As Double
Dim ERROR_SUM As Double

Dim TARGET_RETURN As Double

On Error GoTo ERROR_LABEL

A_VAL = PARAM_VECTOR(1, 1)
B_VAL = PARAM_VECTOR(2, 1)
M_VAL = PARAM_VECTOR(3, 1)
S_VAL = PARAM_VECTOR(4, 1)
    
TARGET_RETURN = PUB_JOHNSON_TARGET

NBINS = UBound(FREQUENCY_VECTOR, 1)

ReDim TEMP_MATRIX(1 To NBINS, 1 To 7)

For i = 1 To NBINS Step 1
    TEMP_MATRIX(i, 1) = FREQUENCY_VECTOR(i, 1)
    TEMP_MATRIX(i, 2) = (TEMP_MATRIX(i, 1) - M_VAL) / S_VAL
    TEMP_MATRIX(i, 4) = JOHNSON_DISTRIBUTION_1G_FUNC(TEMP_MATRIX(i, 2), A_VAL, B_VAL)
    TEMP_MATRIX(i, 5) = JOHNSON_DISTRIBUTION_1F_FUNC(TEMP_MATRIX(i, 4))
    TEMP_MATRIX(i, 6) = FREQUENCY_VECTOR(i, 2)
    BTEMP_SUM = BTEMP_SUM + TEMP_MATRIX(i, 6)
Next i

For i = NBINS - 1 To 1 Step -1
    TEMP_MATRIX(i, 3) = (TEMP_MATRIX(i + 1, 5) - TEMP_MATRIX(i, 5)) / (TEMP_MATRIX(i + 1, 1) - TEMP_MATRIX(i, 1))
    ATEMP_SUM = ATEMP_SUM + TEMP_MATRIX(i, 3)
Next i

CTEMP_SUM = ATEMP_SUM
PROB_SUM = 0
ERROR_SUM = 0
For i = NBINS To 1 Step -1
    TEMP_MATRIX(i, 7) = Abs((TEMP_MATRIX(i, 3) / ATEMP_SUM) - (TEMP_MATRIX(i, 6) / BTEMP_SUM))
    ERROR_SUM = ERROR_SUM + TEMP_MATRIX(i, 7)
Next i

JOHNSON_DISTRIBUTION_ERROR1_FUNC = ERROR_SUM / NBINS

Exit Function
ERROR_LABEL:
JOHNSON_DISTRIBUTION_ERROR1_FUNC = PUB_EPSILON
End Function

'************************************************************************************
'************************************************************************************
'FUNCTION      : JOHNSON_DISTRIBUTION_INITIAL_PARAMETERS_FUNC
'DESCRIPTION   : John Distribution initial paremeters for the parameterrization
'LIBRARY       : STATISTICS
'GROUP         : DIST_JOHNSON
'ID            : 006
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 01/22/2009
'************************************************************************************
'************************************************************************************

Function JOHNSON_DISTRIBUTION_INITIAL_PARAMETERS_FUNC(ByRef DATA_RNG As Variant, _
ByVal TARGET_RETURN As Double, _
Optional ByRef PARAM_RNG As Variant, _
Optional ByVal REFINE_FLAG As Boolean = True, _
Optional ByVal TYPE_INT As Integer = 1, _
Optional ByVal VERSION As Integer = 0, _
Optional ByVal BIN_MIN As Double = 0, _
Optional ByVal BIN_MAX As Double = 0, _
Optional ByVal BIN_WIDTH As Double = 0, _
Optional ByVal DATA_TYPE As Integer = 1, _
Optional ByVal LOG_SCALE As Integer = 0, _
Optional ByRef AMIN_VAL As Double = -0.05, _
Optional ByRef AMAX_VAL As Double = 0.05, _
Optional ByRef ADELTA_VAL As Double = -0.01, _
Optional ByRef BMIN_VAL As Double = 0, _
Optional ByRef BMAX_VAL As Double = 0.5, _
Optional ByRef BDELTA_VAL As Double = 0.029, _
Optional ByRef MMIN_VAL As Double = 0.001, _
Optional ByRef MMAX_VAL As Double = 0.01, _
Optional ByRef MDELTA_VAL As Double = 0.00009, _
Optional ByRef SMIN_VAL As Double = 0.01, _
Optional ByRef SMAX_VAL As Double = 0.03, _
Optional ByRef SDELTA_VAL As Double = 0.0003)

Dim i As Double
Dim j As Double
Dim k As Double
Dim l As Double

Dim NBINS As Long
Dim CHECK_VAL As Integer

Dim A_VAL As Double
Dim B_VAL As Double
Dim M_VAL As Double
Dim S_VAL As Double

Dim ASAVE_VAL As Double
Dim BSAVE_VAL As Double
Dim MSAVE_VAL As Double
Dim SSAVE_VAL As Double

Dim ATEMP_VAL As Double
Dim BTEMP_VAL As Double
Dim MTEMP_VAL As Double
Dim STEMP_VAL As Double

Dim MIN_VAL As Double
Dim ERROR_VAL As Double
Dim FUNC_NAME_STR As String

Dim DATA_VECTOR As Variant
Dim PARAM_VECTOR As Variant
Dim FREQUENCY_VECTOR As Variant

On Error GoTo ERROR_LABEL

PUB_INITIAL_FLAG = True
DATA_VECTOR = DATA_RNG
If UBound(DATA_VECTOR, 1) = 1 Then
    DATA_VECTOR = MATRIX_TRANSPOSE_FUNC(DATA_VECTOR)
End If

If DATA_TYPE <> 0 Then: DATA_VECTOR = MATRIX_PERCENT_FUNC(DATA_VECTOR, LOG_SCALE)


If BIN_WIDTH = 0 Or BIN_MIN = 0 Or BIN_MAX = 0 Then
    BIN_MIN = 2 ^ 52: BIN_MAX = -2 ^ 52
    For i = LBound(DATA_VECTOR) To UBound(DATA_VECTOR)
        If DATA_VECTOR(i, 1) < BIN_MIN Then: BIN_MIN = DATA_VECTOR(i, 1)
        If DATA_VECTOR(i, 1) > BIN_MAX Then: BIN_MAX = DATA_VECTOR(i, 1)
    Next i
    NBINS = UBound(DATA_VECTOR, 1)
    FREQUENCY_VECTOR = HISTOGRAM_BIN_LIMITS_FUNC(BIN_MIN, BIN_MAX, NBINS, 3)
    BIN_WIDTH = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR))
    BIN_MIN = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR) + 1)
    NBINS = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR) + 2)
End If

FREQUENCY_VECTOR = HISTOGRAM_FREQUENCY_FUNC(DATA_VECTOR, NBINS, BIN_MIN, BIN_WIDTH, 1)
NBINS = UBound(FREQUENCY_VECTOR, 1)
PUB_JOHNSON_TARGET = TARGET_RETURN

If TYPE_INT = 0 Then
    FUNC_NAME_STR = "JOHNSON_DISTRIBUTION_ERROR1_FUNC"
Else
    FUNC_NAME_STR = "JOHNSON_DISTRIBUTION_ERROR2_FUNC"
    PUB_JOHNSON_VERSION = VERSION
End If

If IsArray(PARAM_RNG) = False Then
    ReDim PARAM_VECTOR(1 To 4, 1 To 1)
    GoSub GUESS_LINE
Else
    PARAM_VECTOR = PARAM_RNG
    If UBound(PARAM_VECTOR, 1) = 1 Then
        PARAM_VECTOR = MATRIX_TRANSPOSE_FUNC(PARAM_VECTOR)
    End If
    If PARAM_VECTOR(1, 1) = 0 And PARAM_VECTOR(2, 1) = 0 And _
       PARAM_VECTOR(3, 1) = 0 And PARAM_VECTOR(4, 1) = 0 Then
        GoSub GUESS_LINE
    End If
End If

ASAVE_VAL = PARAM_VECTOR(1, 1)
BSAVE_VAL = PARAM_VECTOR(2, 1)
MSAVE_VAL = PARAM_VECTOR(3, 1)
SSAVE_VAL = PARAM_VECTOR(4, 1)

ATEMP_VAL = 10 * PARAM_VECTOR(1, 1)
BTEMP_VAL = 10 * PARAM_VECTOR(2, 1)
MTEMP_VAL = 500 * PARAM_VECTOR(3, 1)
STEMP_VAL = 500 * PARAM_VECTOR(4, 1)

'--------------------------------------------------------------------------------------
If REFINE_FLAG = True Then 'Fine Tune
'--------------------------------------------------------------------------------------
    CHECK_VAL = 0
    GoSub JOHNSON_LINE
    MIN_VAL = ERROR_VAL
    For i = A_VAL + ADELTA_VAL To A_VAL - ADELTA_VAL Step ADELTA_VAL / 10
        ATEMP_VAL = 10 * i
        GoSub JOHNSON_LINE
        If ERROR_VAL < MIN_VAL Then
            MIN_VAL = ERROR_VAL
            ASAVE_VAL = i
            CHECK_VAL = 1
        End If
    Next i
    If CHECK_VAL = 1 Then ATEMP_VAL = 10 * ASAVE_VAL
    
    CHECK_VAL = 0
    For j = B_VAL - BDELTA_VAL To B_VAL + BDELTA_VAL Step BDELTA_VAL / 10
        BTEMP_VAL = 10 * j
        GoSub JOHNSON_LINE
        If ERROR_VAL < MIN_VAL Then
            MIN_VAL = ERROR_VAL
            BSAVE_VAL = j
            CHECK_VAL = 1
        End If
    Next j
    If CHECK_VAL = 1 Then BTEMP_VAL = 10 * BSAVE_VAL
    
    CHECK_VAL = 0
    For k = M_VAL - MDELTA_VAL To M_VAL + MDELTA_VAL Step MDELTA_VAL / 10
        MTEMP_VAL = 500 * k
        GoSub JOHNSON_LINE
        If ERROR_VAL < MIN_VAL Then
            MIN_VAL = ERROR_VAL
            MSAVE_VAL = k
            CHECK_VAL = 1
        End If
    Next k
    If CHECK_VAL = 1 Then MTEMP_VAL = 500 * MSAVE_VAL
    
    CHECK_VAL = 0
    For l = S_VAL - SDELTA_VAL To S_VAL + SDELTA_VAL Step SDELTA_VAL / 10
        STEMP_VAL = 500 * l
        GoSub JOHNSON_LINE
        If ERROR_VAL < MIN_VAL Then
            MIN_VAL = ERROR_VAL
            SSAVE_VAL = l
            CHECK_VAL = 1
        End If
    Next l
    If CHECK_VAL = 1 Then STEMP_VAL = 500 * SSAVE_VAL
'--------------------------------------------------------------------------------------
Else 'Quick and Dirty
'--------------------------------------------------------------------------------------
    
    CHECK_VAL = 0
    If BTEMP_VAL = 0 Then BTEMP_VAL = 10 * BMIN_VAL
    If STEMP_VAL = 0 Then STEMP_VAL = 500 * BDELTA_VAL

    MIN_VAL = 2 ^ 52
    For i = AMAX_VAL To AMIN_VAL Step ADELTA_VAL
        ATEMP_VAL = 10 * i
        GoSub JOHNSON_LINE
        If ERROR_VAL < MIN_VAL Then
            CHECK_VAL = 1
            MIN_VAL = ERROR_VAL
            ASAVE_VAL = i
        End If
    Next i
    If CHECK_VAL = 1 Then ATEMP_VAL = 10 * ASAVE_VAL
    
    CHECK_VAL = 0
    For j = BMIN_VAL To BMAX_VAL Step BDELTA_VAL
        BTEMP_VAL = 10 * j
        GoSub JOHNSON_LINE
        If ERROR_VAL < MIN_VAL Then
            CHECK_VAL = 1
            MIN_VAL = ERROR_VAL
            BSAVE_VAL = j
        End If
    Next j
    If CHECK_VAL = 1 Then BTEMP_VAL = 10 * BSAVE_VAL
    
    CHECK_VAL = 0
    For k = MMIN_VAL To MMAX_VAL Step MDELTA_VAL
        MTEMP_VAL = 500 * k
        GoSub JOHNSON_LINE
        If ERROR_VAL < MIN_VAL Then
            CHECK_VAL = 1
            MIN_VAL = ERROR_VAL
            MSAVE_VAL = k
        End If
    Next k
    If CHECK_VAL = 1 Then MTEMP_VAL = 500 * MSAVE_VAL
    
    CHECK_VAL = 0
    For l = SMIN_VAL To SMAX_VAL Step SDELTA_VAL
        STEMP_VAL = 500 * l
        GoSub JOHNSON_LINE
        If ERROR_VAL < MIN_VAL Then
            CHECK_VAL = 1
            MIN_VAL = ERROR_VAL
            SSAVE_VAL = l
        End If
    Next l
    If CHECK_VAL = 1 Then STEMP_VAL = 500 * SSAVE_VAL
'--------------------------------------------------------------------------------------
End If
'--------------------------------------------------------------------------------------

PARAM_VECTOR(1, 1) = ASAVE_VAL
PARAM_VECTOR(2, 1) = BSAVE_VAL
PARAM_VECTOR(3, 1) = MSAVE_VAL
PARAM_VECTOR(4, 1) = SSAVE_VAL

PUB_INITIAL_FLAG = False
JOHNSON_DISTRIBUTION_INITIAL_PARAMETERS_FUNC = PARAM_VECTOR

Exit Function
'-----------------------------------------------------------------------------------
JOHNSON_LINE:

A_VAL = ATEMP_VAL / 10
B_VAL = BTEMP_VAL / 10
M_VAL = MTEMP_VAL / 500
S_VAL = STEMP_VAL / 500

PARAM_VECTOR(1, 1) = A_VAL
PARAM_VECTOR(2, 1) = B_VAL
PARAM_VECTOR(3, 1) = M_VAL
PARAM_VECTOR(4, 1) = S_VAL
ERROR_VAL = Excel.Application.Run(FUNC_NAME_STR, FREQUENCY_VECTOR, PARAM_VECTOR)
'-----------------------------------------------------------------------------------
Return
'-----------------------------------------------------------------------------------
GUESS_LINE:
'-----------------------------------------------------------------------------------
    PARAM_VECTOR(1, 1) = AMAX_VAL
    PARAM_VECTOR(2, 1) = BMAX_VAL
    PARAM_VECTOR(3, 1) = MMAX_VAL
    PARAM_VECTOR(4, 1) = SMAX_VAL
'-----------------------------------------------------------------------------------
Return
'-----------------------------------------------------------------------------------
ERROR_LABEL:
'-----------------------------------------------------------------------------------
PUB_INITIAL_FLAG = False
JOHNSON_DISTRIBUTION_INITIAL_PARAMETERS_FUNC = Err.number
End Function

'************************************************************************************
'************************************************************************************
'FUNCTION      : FIT_JOHNSON_DISTRIBUTION2_FUNC [using predefined density functions]

'DESCRIPTION   :

'In this sub routine we stretch and slide and generally distort a normal
'distribution to generate various other distributions. First, consider the
'equation for the normal density function and then we will introduce a
'magic function of our choosing (which we will call J): z = A + B x J(u)
'where u = (x-m)/s.

'---------Aha! See? Four is too many! With four you can fit an elephant!
'---------Well, that depends upon what functions you're using.

'Von Neumann built a solid framework for quantum mechanics. He also worked in
'game theory (John Nash - Beautiful Mind), studied what are now called von
'Neumann Algebras, and was one of the pioneers of computer science.
'<http://www-history.mcs.st-and.ac.uk/history/Mathematicians/Von_Neumann.html>

'LIBRARY       : STATISTICS
'GROUP         : DIST_JOHNSON
'ID            : 007

'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 01/22/2009
'************************************************************************************
'************************************************************************************

Function FIT_JOHNSON_DISTRIBUTION2_FUNC(ByRef DATA_RNG As Variant, _
ByVal TARGET_RETURN As Double, _
Optional ByRef PARAM_RNG As Variant, _
Optional ByVal VERSION As Integer = 11, _
Optional ByVal BIN_MIN As Double = 0, _
Optional ByVal BIN_MAX As Double = 0, _
Optional ByVal BIN_WIDTH As Double = 0, _
Optional ByVal DATA_TYPE As Integer = 1, _
Optional ByVal LOG_SCALE As Integer = 0, _
Optional ByVal OUTPUT As Integer = 0)
    
Dim i As Long
Dim NBINS As Long

Dim PI_VAL As Double

Dim A_VAL As Double
Dim B_VAL As Double
Dim M_VAL As Double
Dim S_VAL As Double

Dim ATEMP_SUM As Double
Dim BTEMP_SUM As Double
Dim CTEMP_SUM As Double

Dim TEMP_MATRIX As Variant
Dim FREQUENCY_VECTOR As Variant
Dim DATA_VECTOR As Variant
Dim PARAM_VECTOR As Variant

Dim TEMP_STR As String
Dim PROB_SUM As Double
Dim ERROR_SUM As Double

On Error GoTo ERROR_LABEL

PI_VAL = 1 / 2 / 3.14159265358979
PUB_JOHNSON_VERSION = VERSION

DATA_VECTOR = DATA_RNG
If UBound(DATA_VECTOR, 1) = 1 Then
    DATA_VECTOR = MATRIX_TRANSPOSE_FUNC(DATA_VECTOR)
End If
If DATA_TYPE <> 0 Then
    DATA_VECTOR = MATRIX_PERCENT_FUNC(DATA_VECTOR, LOG_SCALE)
End If

If BIN_WIDTH = 0 Or BIN_MIN = 0 Or BIN_MAX = 0 Then
    BIN_MIN = 2 ^ 52: BIN_MAX = -2 ^ 52
    For i = LBound(DATA_VECTOR) To UBound(DATA_VECTOR)
        If DATA_VECTOR(i, 1) < BIN_MIN Then: BIN_MIN = DATA_VECTOR(i, 1)
        If DATA_VECTOR(i, 1) > BIN_MAX Then: BIN_MAX = DATA_VECTOR(i, 1)
    Next i
    NBINS = UBound(DATA_VECTOR, 1)
    FREQUENCY_VECTOR = HISTOGRAM_BIN_LIMITS_FUNC(BIN_MIN, BIN_MAX, NBINS, 3)
    BIN_WIDTH = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR))
    BIN_MIN = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR) + 1)
    NBINS = FREQUENCY_VECTOR(LBound(FREQUENCY_VECTOR) + 2)
End If
FREQUENCY_VECTOR = HISTOGRAM_FREQUENCY_FUNC(DATA_VECTOR, NBINS, BIN_MIN, BIN_WIDTH, 1)
NBINS = UBound(FREQUENCY_VECTOR, 1)

PARAM_VECTOR = PARAM_RNG
If UBound(PARAM_VECTOR, 1) = 1 Then: PARAM_VECTOR = MATRIX_TRANSPOSE_FUNC(PARAM_VECTOR)

If OUTPUT <> 0 Then
    PUB_JOHNSON_TARGET = TARGET_RETURN
    FIT_JOHNSON_DISTRIBUTION2_FUNC = NELDER_MEAD_OPTIMIZATION2_FUNC("JOHNSON_DISTRIBUTION_ERROR2_FUNC", _
                                  FREQUENCY_VECTOR, PARAM_VECTOR)
    Exit Function
End If

A_VAL = PARAM_VECTOR(1, 1)
B_VAL = PARAM_VECTOR(2, 1)
M_VAL = PARAM_VECTOR(3, 1)
S_VAL = PARAM_VECTOR(4, 1)

ReDim TEMP_MATRIX(0 To NBINS, 1 To 9)

ATEMP_SUM = 0
BTEMP_SUM = 0
CTEMP_SUM = 0
    
TEMP_MATRIX(0, 1) = "[X]"
TEMP_MATRIX(0, 2) = "U=(X-M)/S"
TEMP_MATRIX(0, 3) = "Z=A+B J(U)"
TEMP_MATRIX(0, 4) = "N[Z]"
TEMP_MATRIX(0, 5) = "FREQ"
TEMP_MATRIX(0, 6) = "F(X)"
TEMP_MATRIX(0, 8) = "N[Z](SCALED)"

For i = 1 To NBINS
    TEMP_MATRIX(i, 1) = FREQUENCY_VECTOR(i, 1)

    TEMP_MATRIX(i, 2) = (TEMP_MATRIX(i, 1) - M_VAL) / S_VAL
    TEMP_MATRIX(i, 3) = A_VAL + B_VAL * (JOHNSON_DISTRIBUTION_2F_FUNC(TEMP_MATRIX(i, 2), VERSION))

    TEMP_MATRIX(i, 4) = PI_VAL * Exp(-0.5 * TEMP_MATRIX(i, 3) ^ 2)
    ATEMP_SUM = ATEMP_SUM + TEMP_MATRIX(i, 4)

    TEMP_MATRIX(i, 5) = FREQUENCY_VECTOR(i, 2)
    BTEMP_SUM = BTEMP_SUM + TEMP_MATRIX(i, 5)
Next i


CTEMP_SUM = ATEMP_SUM
PROB_SUM = 0
ERROR_SUM = 0

For i = NBINS To 1 Step -1
    TEMP_MATRIX(i, 6) = CTEMP_SUM / ATEMP_SUM
    CTEMP_SUM = CTEMP_SUM - TEMP_MATRIX(i, 4)
    TEMP_MATRIX(i, 7) = Abs((TEMP_MATRIX(i, 4) / ATEMP_SUM) - (TEMP_MATRIX(i, 5) / BTEMP_SUM))
    ERROR_SUM = ERROR_SUM + TEMP_MATRIX(i, 7)
    TEMP_MATRIX(i, 8) = TEMP_MATRIX(i, 4) / ATEMP_SUM
    If i <> NBINS Then
        If (TEMP_MATRIX(i, 1) < TARGET_RETURN) And (TEMP_MATRIX(i + 1, 1) >= TARGET_RETURN) Then
            TEMP_MATRIX(i, 9) = TEMP_MATRIX(i, 6) + (TEMP_MATRIX(i + 1, 6) - _
            TEMP_MATRIX(i, 6)) * (TARGET_RETURN - TEMP_MATRIX(i, 1)) / (TEMP_MATRIX(i + 1, 1) - TEMP_MATRIX(i, 1))
        Else
            TEMP_MATRIX(i, 9) = 0
        End If
    End If
    PROB_SUM = PROB_SUM + TEMP_MATRIX(i, 9)
Next i

TEMP_STR = "N[z]-Freq (Scaled)- Avg. Error: " & Format(ERROR_SUM / NBINS, "0.0000%")
TEMP_MATRIX(0, 7) = TEMP_STR

TEMP_STR = "Prob[return < " & Format(TARGET_RETURN, "0.0000%") & "] = " & Format(PROB_SUM, "0.00%")
TEMP_MATRIX(0, 9) = TEMP_STR
    
FIT_JOHNSON_DISTRIBUTION2_FUNC = TEMP_MATRIX

Exit Function
ERROR_LABEL:
FIT_JOHNSON_DISTRIBUTION2_FUNC = Err.number
End Function

'************************************************************************************
'************************************************************************************
'FUNCTION      : JOHNSON_DISTRIBUTION_2F_FUNC
'DESCRIPTION   : John Distribution predefine density functions

'Integration is one of the two basic operations in
'calculus and since it, unlike differentiation, is non-trivial, tables
'of known integrals are often useful with the Johnson Function.
'Here's a few where I chose the increasing functions sinh(u), log(u/(1-u))
'and log(u).

'Remember: density = N[A + B x f(u)]   with u = (x-m)/s

'LIBRARY       : STATISTICS
'GROUP         : DIST_JOHNSON
'ID            : 009
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 01/22/2009
'************************************************************************************
'************************************************************************************

Private Function JOHNSON_DISTRIBUTION_2F_FUNC(ByVal TEMP_VAL As Double, _
Optional ByVal VERSION As Integer = 0)

On Error GoTo ERROR_LABEL


Select Case VERSION
Case 0
'-------------------------------------------------------------------------
'If we plot N(z) versus z, we'd get the familiar normal distribution, but if we
'plot N versus u we'd get something else ... depending upon our choice of J.
'Now consider N versus x (where u is just the x-variable, moved left or right
'and scaled).
'----------------------------------------------------------------------------------
    JOHNSON_DISTRIBUTION_2F_FUNC = TEMP_VAL '---> Plain Vanilla Normal Dist
Case 1
    JOHNSON_DISTRIBUTION_2F_FUNC = Atn(TEMP_VAL)
Case 2
    JOHNSON_DISTRIBUTION_2F_FUNC = Log(TEMP_VAL)
Case 3
    JOHNSON_DISTRIBUTION_2F_FUNC = Log(TEMP_VAL / (1 - TEMP_VAL))
Case 4 'Inverse Cosine
    JOHNSON_DISTRIBUTION_2F_FUNC = Atn(-TEMP_VAL / _
        Sqr(-TEMP_VAL * TEMP_VAL + 1)) + 2 * Atn(1)
Case 5 'Inverse Sine
    JOHNSON_DISTRIBUTION_2F_FUNC = Atn(TEMP_VAL / Sqr(-TEMP_VAL * TEMP_VAL + 1))
Case 6 'Inverse hyperbolic cotangent
    JOHNSON_DISTRIBUTION_2F_FUNC = Log((TEMP_VAL + 1) / (TEMP_VAL - 1)) / 2
Case 7 'Inverse hyperbolic tangent
    JOHNSON_DISTRIBUTION_2F_FUNC = Log((1 + TEMP_VAL) / (1 - TEMP_VAL)) / 2
Case 8 'Inverse hyperbolic cosecant
    JOHNSON_DISTRIBUTION_2F_FUNC = Log((Sgn(TEMP_VAL) * _
        Sqr(TEMP_VAL * TEMP_VAL + 1) + 1) / TEMP_VAL)
Case 9 'Inverse hyperbolic secant
    JOHNSON_DISTRIBUTION_2F_FUNC = Log(Sqr(-TEMP_VAL * TEMP_VAL + 1) + 1) / TEMP_VAL

Case 10 'Inverse hyperbolic cosine
    JOHNSON_DISTRIBUTION_2F_FUNC = Log(TEMP_VAL + Sqr(TEMP_VAL * TEMP_VAL - 1))

Case Else 'Inverse hyperbolic sine
    JOHNSON_DISTRIBUTION_2F_FUNC = Log(TEMP_VAL + Sqr(TEMP_VAL * TEMP_VAL + 1))
End Select

Exit Function
ERROR_LABEL:
JOHNSON_DISTRIBUTION_2F_FUNC = Err.number
End Function


'************************************************************************************
'************************************************************************************
'FUNCTION      : JOHNSON_DISTRIBUTION_ERROR2_FUNC [using predefined density functions]
'DESCRIPTION   : John Distribution Error Function
'LIBRARY       : STATISTICS
'GROUP         : DIST_JOHNSON
'ID            : 010
'AUTHOR        : RAFAEL NICOLAS FERMIN COTA
'LAST UPDATE   : 01/22/2009
'************************************************************************************
'************************************************************************************

Private Function JOHNSON_DISTRIBUTION_ERROR2_FUNC(ByRef FREQUENCY_VECTOR As Variant, _
ByRef PARAM_VECTOR As Variant)

Dim i As Long
Dim NBINS As Long
Dim VERSION As Integer

Dim PI_VAL As Double

Dim A_VAL As Double
Dim B_VAL As Double
Dim M_VAL As Double
Dim S_VAL As Double

Dim ATEMP_SUM As Double
Dim BTEMP_SUM As Double
Dim CTEMP_SUM As Double

Dim TEMP_MATRIX As Variant

Dim PROB_SUM As Double
Dim ERROR_SUM As Double

Dim TARGET_RETURN As Double

On Error GoTo ERROR_LABEL

PI_VAL = 1 / 2 / 3.14159265358979

A_VAL = PARAM_VECTOR(1, 1)
B_VAL = PARAM_VECTOR(2, 1)
M_VAL = PARAM_VECTOR(3, 1)
S_VAL = PARAM_VECTOR(4, 1)
    
VERSION = PUB_JOHNSON_VERSION
TARGET_RETURN = PUB_JOHNSON_TARGET

NBINS = UBound(FREQUENCY_VECTOR, 1)

ReDim TEMP_MATRIX(1 To NBINS, 1 To 7)

For i = 1 To NBINS
    TEMP_MATRIX(i, 1) = FREQUENCY_VECTOR(i, 1)

    TEMP_MATRIX(i, 2) = (TEMP_MATRIX(i, 1) - M_VAL) / S_VAL

    TEMP_MATRIX(i, 3) = A_VAL + B_VAL * (JOHNSON_DISTRIBUTION_2F_FUNC(TEMP_MATRIX(i, 2), VERSION))
    TEMP_MATRIX(i, 4) = PI_VAL * Exp(-0.5 * TEMP_MATRIX(i, 3) ^ 2)
    ATEMP_SUM = ATEMP_SUM + TEMP_MATRIX(i, 4)

    TEMP_MATRIX(i, 5) = FREQUENCY_VECTOR(i, 2)
    BTEMP_SUM = BTEMP_SUM + TEMP_MATRIX(i, 5)
Next i

CTEMP_SUM = ATEMP_SUM
PROB_SUM = 0
ERROR_SUM = 0

For i = NBINS To 1 Step -1
    TEMP_MATRIX(i, 6) = CTEMP_SUM / ATEMP_SUM
    CTEMP_SUM = CTEMP_SUM - TEMP_MATRIX(i, 4)
    TEMP_MATRIX(i, 7) = Abs((TEMP_MATRIX(i, 4) / ATEMP_SUM) - (TEMP_MATRIX(i, 5) / BTEMP_SUM))
    ERROR_SUM = ERROR_SUM + TEMP_MATRIX(i, 7)
Next i

JOHNSON_DISTRIBUTION_ERROR2_FUNC = (ERROR_SUM / NBINS) ^ 0.5 'RMSE

Exit Function
ERROR_LABEL:
JOHNSON_DISTRIBUTION_ERROR2_FUNC = PUB_EPSILON
End Function
