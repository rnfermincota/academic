
Option Explicit     'Requires that all variables to be declared explicitly.
Option Base 1       'The "Option Base" statement allows to specify 0 or 1 as the
                    'default first index of arrays.

'Example 1 in Class: Remove duplicates rows from a vector

Function ARRAY_REMOVE_DUPLICATES_FUNC(ByRef DATA_VECTOR As Variant, _
Optional ByVal VERSION As Integer = 0)
'ByRef DATA_RNG As Variant

'VERSION 0 --> Recognize single space
'VERSION 1 --> Do not recognize single space

Dim i As Long
Dim j As Long

Dim NROWS As Long
Dim TEMP_STR As String
'Dim DATA_VECTOR As Variant

'If you want to use this function inside excel instead of calling the main routine
'you must change the input DATA_VECTOR for DATA_RNG and declare DATA_VECTOR again
'inside the function. This is a trick to save memoory, so we don't have two
'arrays declared.

Dim TEMP_VECTOR As Variant
Dim COLLECTION_OBJ As New Collection

If IsArray(DATA_VECTOR) = False Then: GoTo ERROR_LABEL

On Error Resume Next

NROWS = UBound(DATA_VECTOR)
If IS_2D_ARRAY_FUNC(DATA_VECTOR) Then
    For i = 1 To NROWS
        TEMP_STR = DATA_VECTOR(i, 1)
        If VERSION = 0 Then
            TEMP_STR = Trim(REMOVE_EXTRA_SPACES_FUNC(TEMP_STR))
        Else
            TEMP_STR = Trim(Replace(REMOVE_EXTRA_SPACES_FUNC(TEMP_STR), " ", ""))
        End If
        Call COLLECTION_OBJ.Add(CStr(i), TEMP_STR)
        DATA_VECTOR(i, 1) = TEMP_STR
        If Err.Number <> 0 Then: Err.Number = 0 'Found Duplicate
    Next i
    NROWS = COLLECTION_OBJ.Count
    ReDim TEMP_VECTOR(1 To NROWS, 1 To 1)
    For i = 1 To NROWS
        j = CLng(COLLECTION_OBJ.Item(i))
        TEMP_VECTOR(i, 1) = DATA_VECTOR(j, 1)
    Next i
Else
    For i = 1 To NROWS
        TEMP_STR = DATA_VECTOR(i)
        If VERSION = 0 Then
            TEMP_STR = Trim(REMOVE_EXTRA_SPACES_FUNC(TEMP_STR))
        Else
            TEMP_STR = Trim(Replace(REMOVE_EXTRA_SPACES_FUNC(TEMP_STR), " ", ""))
        End If
        Call COLLECTION_OBJ.Add(CStr(i), TEMP_STR)
        DATA_VECTOR(i) = TEMP_STR
        If Err.Number <> 0 Then: Err.Number = 0 'Found Duplicate
    Next i
    NROWS = COLLECTION_OBJ.Count
    ReDim TEMP_VECTOR(1 To NROWS)
    For i = 1 To NROWS
        j = CLng(COLLECTION_OBJ.Item(i))
        TEMP_VECTOR(i) = DATA_VECTOR(j)
    Next i
End If

ARRAY_REMOVE_DUPLICATES_FUNC = TEMP_VECTOR

Exit Function
ERROR_LABEL:
ARRAY_REMOVE_DUPLICATES_FUNC = Err.Number
End Function


'Example in class 2: Use two custom classes that allow you to store and
'look up multiple data items quickly.

Function ARRAY_MATCH_DATA_FUNC(ByRef ADATA_ARR As Variant, _
ByRef BDATA_ARR As Variant)

Dim i As Long
Dim j As Long
Dim k As Long

Dim DATA_OBJ As New Collection
'Collections are very useful, but you can only store one item, and you
'can't store 'types'.

Dim TEMP_VAL As Variant
Dim TEMP_ARR() As Variant
'Dim T_VAL As Single

On Error GoTo ERROR_LABEL

k = 1
For i = LBound(BDATA_ARR) To UBound(BDATA_ARR)
  DATA_OBJ.Add CStr(k), CStr(BDATA_ARR(i))
  'first item is array sequence , s
  'econd is string we lookup on both must be strings
   k = k + 1
Next i

'search
'set error trapping on
On Error Resume Next

ReDim TEMP_ARR(1 To 1)
j = 0: k = 1
For i = LBound(ADATA_ARR) To UBound(ADATA_ARR)
  'next line looks up the item from ADATA_ARR in the collection, and
  'converts the result to a number. If no error, this gives us the
  'sequence number, eg if the number is 45, it means B2(45,1) is a match
  'If you get an error there was no match
  TEMP_VAL = DATA_OBJ(CStr(ADATA_ARR(k)))
  If Err = 0 Then 'no error, we have a match
    j = j + 1
    ReDim Preserve TEMP_ARR(1 To j)
    TEMP_ARR(j) = TEMP_VAL
  Else 'no match, reset error
    Err = 0
  End If
  k = k + 1
Next i

'report matches and time
'T_VAL = Timer - T_VAL 'freeze timer
'MsgBox "I found " & j & " matches in " & Format(T_VAL, "0.00") & _
" seconds", vbInformation, "Method 1"
ARRAY_MATCH_DATA_FUNC = TEMP_ARR

'------------------------------------------------------------------------------

Exit Function
ERROR_LABEL:
ARRAY_MATCH_DATA_FUNC = Err.Number
End Function




