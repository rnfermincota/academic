mutate(character = character %>% clean_names()) %>%
select(character)
# Chunk 1: setup
rm(list=ls())
graphics.off()
knitr::opts_chunk$set(
# echo = TRUE,
collapse=TRUE,
comment="",
message=FALSE,
warning=FALSE,
cache=FALSE,
tidy=TRUE,
tidy.opts=list(width.cutoff=60, fig.align='center')
)
# Libraries
library(zoo)
library(dplyr)
library(tidyr)
library(purrr)
library(magrittr) # %<>%
library(snakecase)
library(stringr)
library(tibble)
library(fuzzyjoin)
# devtools::install_git("https://github.com/jrvarma/jrvFinance.git")
library(jrvFinance) # https://github.com/jrvarma/jrvFinance.git
library(janitor)
library(unpivotr)
format.dt.f = function(
df,
page_length = 5,
perc_vars=NA,
ron_vars=NA,
ron_digits=2
){
if( is.null(df) | purrr::is_empty(df) ){return()}
double.two.int.f = function( df ){
get_no_digits = function(x){
if( ! is.numeric(x) ){return(NULL)}
x = x %% 1
x = as.character(x)
no_digits = nchar(x) - 2
no_digits = ifelse( no_digits == -1, 0, no_digits )
return(no_digits)
}
suppressWarnings({
new_df = df %>%
as_tibble() %>%
mutate_if( function(x) max( get_no_digits(x), na.rm = T ) == 0, as.integer )
})
return(new_df)
}
df = double.two.int.f( df )
max_length = nrow(df)
page_length_menu = c(10,25,50,100, max_length, page_length) %>% unique()
page_length_menu = page_length_menu[ !page_length_menu > max_length]
dt = DT::datatable(
df,
extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns'),
rownames = FALSE,
options = list(
dom = 'Bflrtip',
buttons = I( c('colvis','copy', 'excel') ),
colReorder = TRUE,
keys = TRUE,
pageLength = page_length,
lengthMenu = page_length_menu,
scrollX = TRUE,
scrollCollapse = TRUE
)
)
if (!is.na(ron_vars)[1]) dt=dt %>% DT::formatRound( ron_vars, ron_digits )
if (!is.na(perc_vars)[1]) dt=dt %>% DT::formatPercentage( perc_vars, 2 )
return(dt)
}
# Chunk 2
path_root = file.path("..", "..")
path_code = file.path(path_root, "1_source")
path_data = file.path(path_root, "2_data")
path_output=file.path(path_root, "3_output")
load(file.path(path_output, "target_output.rda"))
xlsx_obj1 <- file.path(path_data, "RNFC_COMP1") %>% readRDS
xlsx_obj2 <- file.path(path_data, "RNFC_COMP2") %>% readRDS
list(
scenarios$RNFC_COMP1$business,
scenarios$RNFC_COMP2$business
) %>%
set_names(str_replace(names(scenarios), "RNFC_", "")) %>%
listviewer::jsonedit()
# Chunk 3
xlsx_obj1 %>%
filter(sheet == "Summary") %>%
rectify() %>%
format.dt.f(.)
# Chunk 4
xlsx_obj2 %>%
filter(sheet == "Valuation Summary") %>%
rectify() %>%
format.dt.f(.)
# Chunk 5
# Set up and clean bag
bag=xlsx_obj1 %>% filter(sheet == "Summary") %>%
filter(!is.na(character), row<=16) %>%
select(row, col, character, data_type)
# This leaves us with the following bags of cells:
bag$character <- trimws(bag$character, which = c("right"))
# Chunk 6
# Create Partitions
idx = bag %>%
filter(character %>% endsWith(":"))
idx
# Chunk 7
desc_partitions = partition(bag, idx)
desc_partitions %>% listviewer::jsonedit()
desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
select(character)
setwd("~/Dropbox/TEACHING/Schools/1_NUS/Courses/2022/wip/PE/cases/3_private_equity/framework/1_source/walkthrough")
# Chunk 1: setup
rm(list=ls())
graphics.off()
knitr::opts_chunk$set(
# echo = TRUE,
collapse=TRUE,
comment="",
message=FALSE,
warning=FALSE,
cache=FALSE,
tidy=TRUE,
tidy.opts=list(width.cutoff=60, fig.align='center')
)
# Libraries
library(zoo)
library(dplyr)
library(tidyr)
library(purrr)
library(magrittr) # %<>%
library(snakecase)
library(stringr)
library(tibble)
library(fuzzyjoin)
# devtools::install_git("https://github.com/jrvarma/jrvFinance.git")
library(jrvFinance) # https://github.com/jrvarma/jrvFinance.git
library(janitor)
library(unpivotr)
format.dt.f = function(
df,
page_length = 5,
perc_vars=NA,
ron_vars=NA,
ron_digits=2
){
if( is.null(df) | purrr::is_empty(df) ){return()}
double.two.int.f = function( df ){
get_no_digits = function(x){
if( ! is.numeric(x) ){return(NULL)}
x = x %% 1
x = as.character(x)
no_digits = nchar(x) - 2
no_digits = ifelse( no_digits == -1, 0, no_digits )
return(no_digits)
}
suppressWarnings({
new_df = df %>%
as_tibble() %>%
mutate_if( function(x) max( get_no_digits(x), na.rm = T ) == 0, as.integer )
})
return(new_df)
}
df = double.two.int.f( df )
max_length = nrow(df)
page_length_menu = c(10,25,50,100, max_length, page_length) %>% unique()
page_length_menu = page_length_menu[ !page_length_menu > max_length]
dt = DT::datatable(
df,
extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns'),
rownames = FALSE,
options = list(
dom = 'Bflrtip',
buttons = I( c('colvis','copy', 'excel') ),
colReorder = TRUE,
keys = TRUE,
pageLength = page_length,
lengthMenu = page_length_menu,
scrollX = TRUE,
scrollCollapse = TRUE
)
)
if (!is.na(ron_vars)[1]) dt=dt %>% DT::formatRound( ron_vars, ron_digits )
if (!is.na(perc_vars)[1]) dt=dt %>% DT::formatPercentage( perc_vars, 2 )
return(dt)
}
# Chunk 2
path_root = file.path("..", "..")
path_code = file.path(path_root, "1_source")
path_data = file.path(path_root, "2_data")
path_output=file.path(path_root, "3_output")
load(file.path(path_output, "target_output.rda"))
xlsx_obj1 <- file.path(path_data, "RNFC_COMP1") %>% readRDS
xlsx_obj2 <- file.path(path_data, "RNFC_COMP2") %>% readRDS
list(
scenarios$RNFC_COMP1$business,
scenarios$RNFC_COMP2$business
) %>%
set_names(str_replace(names(scenarios), "RNFC_", "")) %>%
listviewer::jsonedit()
# Chunk 3
xlsx_obj1 %>%
filter(sheet == "Summary") %>%
rectify() %>%
format.dt.f(.)
# Chunk 4
xlsx_obj2 %>%
filter(sheet == "Valuation Summary") %>%
rectify() %>%
format.dt.f(.)
# Chunk 5
# Set up and clean bag
bag=xlsx_obj1 %>% filter(sheet == "Summary") %>%
filter(!is.na(character), row<=16) %>%
select(row, col, character, data_type)
# This leaves us with the following bags of cells:
bag$character <- trimws(bag$character, which = c("right"))
# Chunk 6
# Create Partitions
idx = bag %>%
filter(character %>% endsWith(":"))
idx
# Chunk 7
desc_partitions = partition(bag, idx)
desc_partitions %>% listviewer::jsonedit()
# Chunk 8
clean_names <- function(old_names){
new_names <- old_names %>%
gsub("'", "", .) %>% # remove quotation marks
gsub("\"", "", .) %>% # remove quotation marks
gsub("%", ".percent_", .) %>% # starting with "." as a workaround, to make
# ".percent" a valid name. The "." will be replaced in the call to to_any_case
# via the preprocess argument anyway.
gsub("^[ ]+", "", .) %>%
make.names(.) %>%
# Handle dots, multiple underscores, case conversion, string transliteration
snakecase::to_any_case(
case = "snake" #,
# preprocess = "\\.",
# replace_special_characters = c("Latin-ASCII")
)
new_names
}
# Generate Headings
headings <- desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
select(character) %>%
as.list()
headings <- headings$character
desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
select(character)
desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
select(character) %>%
as.list()
desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
select(character)
# Generate Headings
headings <- desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
pull(character) #%>% as.list()
headings
# Generate Headings
headings <- desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
pull(character) %>%
as.list()
headings
headings$character
# Generate Headings
headings <- desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
select(character) %>%
as.list()
headings$character
# Generate Headings
headings <- desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
pull(character)
headings
headings
# Chunk 1: setup
rm(list=ls())
graphics.off()
knitr::opts_chunk$set(
# echo = TRUE,
collapse=TRUE,
comment="",
message=FALSE,
warning=FALSE,
cache=FALSE,
tidy=TRUE,
tidy.opts=list(width.cutoff=60, fig.align='center')
)
# Libraries
library(zoo)
library(dplyr)
library(tidyr)
library(purrr)
library(magrittr) # %<>%
library(snakecase)
library(stringr)
library(tibble)
library(fuzzyjoin)
# devtools::install_git("https://github.com/jrvarma/jrvFinance.git")
library(jrvFinance) # https://github.com/jrvarma/jrvFinance.git
library(janitor)
library(unpivotr)
format.dt.f = function(
df,
page_length = 5,
perc_vars=NA,
ron_vars=NA,
ron_digits=2
){
if( is.null(df) | purrr::is_empty(df) ){return()}
double.two.int.f = function( df ){
get_no_digits = function(x){
if( ! is.numeric(x) ){return(NULL)}
x = x %% 1
x = as.character(x)
no_digits = nchar(x) - 2
no_digits = ifelse( no_digits == -1, 0, no_digits )
return(no_digits)
}
suppressWarnings({
new_df = df %>%
as_tibble() %>%
mutate_if( function(x) max( get_no_digits(x), na.rm = T ) == 0, as.integer )
})
return(new_df)
}
df = double.two.int.f( df )
max_length = nrow(df)
page_length_menu = c(10,25,50,100, max_length, page_length) %>% unique()
page_length_menu = page_length_menu[ !page_length_menu > max_length]
dt = DT::datatable(
df,
extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns'),
rownames = FALSE,
options = list(
dom = 'Bflrtip',
buttons = I( c('colvis','copy', 'excel') ),
colReorder = TRUE,
keys = TRUE,
pageLength = page_length,
lengthMenu = page_length_menu,
scrollX = TRUE,
scrollCollapse = TRUE
)
)
if (!is.na(ron_vars)[1]) dt=dt %>% DT::formatRound( ron_vars, ron_digits )
if (!is.na(perc_vars)[1]) dt=dt %>% DT::formatPercentage( perc_vars, 2 )
return(dt)
}
# Chunk 2
path_root = file.path("..", "..")
path_code = file.path(path_root, "1_source")
path_data = file.path(path_root, "2_data")
path_output=file.path(path_root, "3_output")
load(file.path(path_output, "target_output.rda"))
xlsx_obj1 <- file.path(path_data, "RNFC_COMP1") %>% readRDS
xlsx_obj2 <- file.path(path_data, "RNFC_COMP2") %>% readRDS
list(
scenarios$RNFC_COMP1$business,
scenarios$RNFC_COMP2$business
) %>%
set_names(str_replace(names(scenarios), "RNFC_", "")) %>%
listviewer::jsonedit()
# Chunk 3
xlsx_obj1 %>%
filter(sheet == "Summary") %>%
rectify() %>%
format.dt.f(.)
# Chunk 4
xlsx_obj2 %>%
filter(sheet == "Valuation Summary") %>%
rectify() %>%
format.dt.f(.)
# Chunk 5
# Set up and clean bag
bag=xlsx_obj1 %>% filter(sheet == "Summary") %>%
filter(!is.na(character), row<=16) %>%
select(row, col, character, data_type)
# This leaves us with the following bags of cells:
bag$character <- trimws(bag$character, which = c("right"))
# Chunk 6
# Create Partitions
idx = bag %>%
filter(character %>% endsWith(":"))
idx
# Chunk 7
desc_partitions = partition(bag, idx)
desc_partitions %>% listviewer::jsonedit()
# Chunk 8
clean_names <- function(old_names){
new_names <- old_names %>%
gsub("'", "", .) %>% # remove quotation marks
gsub("\"", "", .) %>% # remove quotation marks
gsub("%", ".percent_", .) %>% # starting with "." as a workaround, to make
# ".percent" a valid name. The "." will be replaced in the call to to_any_case
# via the preprocess argument anyway.
gsub("^[ ]+", "", .) %>%
make.names(.) %>%
# Handle dots, multiple underscores, case conversion, string transliteration
snakecase::to_any_case(
case = "snake" #,
# preprocess = "\\.",
# replace_special_characters = c("Latin-ASCII")
)
new_names
}
# Generate Headings
headings <- desc_partitions %>%
mutate(character = character %>% clean_names()) %>%
pull(character)
headings
# Chunk 9
desc_partitions %>%
select(cells) %>%
slice(1) %>%
pull()
desc_partitions
desc_partitions
desc_partitions$cells[1]
desc_partitions$cells[[1]]
desc_partitions$cells[[1]] %>%
#cells %>%
select(character)
desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n())
desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n()) %>%
as.list()
desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n()) %>%
as.list() %>%
unlist()
desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n()) %>%
as.list() %>%
unlist() %>%
unname()
desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n())
desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n()) %>%
as.list() %>%
unlist() %>%
unname()
desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n())
desc_partitions$cells[[1]] %>%
#cells %>%
select(character)
desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n())
desc_partitions$cells[[1]] %>%
#cells %>%
slice(2:n()) %>%
pull(character)
s1=desc_partitions$cells[[1]] %>%
#cells %>%
slice(2:n()) %>%
pull(character) %>%
as.list() %>%
unlist() %>%
unname()
s2=desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n()) %>%
as.list() %>%
unlist() %>%
unname()
s1=desc_partitions$cells[[1]] %>%
#cells %>%
slice(2:n()) %>%
pull(character)
s2=desc_partitions$cells[[1]] %>%
#cells %>%
select(character) %>%
slice(2:n()) %>%
as.list() %>%
unlist() %>%
unname()
all.equal(s1, s2)
