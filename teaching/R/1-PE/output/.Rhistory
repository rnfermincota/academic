rm(list=ls())
setwd("~/Dropbox/RHAPSODY/1_PROGRAMMING/1_r/6_unpivotr/Challenge")
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = "."
path_code = file.path(path_root, "code") #, "1_source")
path_data = file.path(path_root, "data") #, "2_data")
#---------------------------------------------------------------------------------------------------------
files_list=list.files(path_data)
# files_list=files_list[-grep("xlsx", files_list)]
scenarios=as.vector(1:length(files_list), mode="list")
scenarios=purrr::set_names(scenarios, files_list)
toggle=purrr::set_names(c(1, 2), files_list)
# toggle=purrr::set_names(c(1), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i=files_list[1]
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_root, "run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation #,
#commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization)#, valuation, commentary)
}
# toggle=purrr::set_names(c(1), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i=files_list[1]
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_root, "run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation #,
#commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization)#, valuation, commentary)
}
load(file.path(path_root, "validate", "output", "target_output.rda"))
all.equal(scenarios, target) # TRUE
rm(list=ls())
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = "."
setwd("~/Dropbox/RHAPSODY/1_PROGRAMMING/1_r/6_unpivotr/Challenge/validate")
rm(list=ls())
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = "."
code_path = file.path(path_root, "code") #, "1_source")
data_path = file.path(path_root, "data") #, "2_data")
#---------------------------------------------------------------------------------------------------------
files_list=list.files(data_path)
# files_list=files_list[-grep("xlsx", files_list)]
scenarios=as.vector(1:length(files_list), mode="list")
scenarios=purrr::set_names(scenarios, files_list)
toggle=purrr::set_names(c(1, 2), files_list)
# toggle=purrr::set_names(c(1), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i=files_list[1]
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(data_path, i) %>% readRDS
# xlsx_obj <- file.path("data/RNFC_COMP1") %>% readRDS
# xlsx_toggle = 1
# xlsx_obj <- file.path("data/RNFC_COMP2") %>% readRDS
# xlsx_toggle = 2
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_root, "run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation,
commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization, valuation) #, commentary)
}
# toggle=purrr::set_names(c(1), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i=files_list[1]
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(data_path, i) %>% readRDS
# xlsx_obj <- file.path("data/RNFC_COMP1") %>% readRDS
# xlsx_toggle = 1
# xlsx_obj <- file.path("data/RNFC_COMP2") %>% readRDS
# xlsx_toggle = 2
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_root, "run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation #,
# commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization, valuation) #, commentary)
}
target=scenarios; save(target, file=file.path(path_root, "output", "target_output.rda"))
load(file.path(path_root, "output", "target_output.rda"))
all.equal(scenarios, target) # TRUE
# for(i in 1:length(files_list)){
#  exec(assign, paste0("COMPANY", i), scenarios[[i]])
#}
#---------------------------------------------------------------------------------------------------------
rm(i, l)
rm(xlsx_obj, xlsx_toggle, toggle) # xlsx_name
rm(code_path, data_path, files_list)
rm(scenarios)
rm(list=ls())
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = "."
path_code = file.path(path_root, "code") #, "1_source")
path_data = file.path(path_root, "data") #, "2_data")
#---------------------------------------------------------------------------------------------------------
files_list=list.files(path_data)
# files_list=files_list[-grep("xlsx", files_list)]
scenarios=as.vector(1:length(files_list), mode="list")
scenarios=purrr::set_names(scenarios, files_list)
toggle=purrr::set_names(c(1, 2), files_list)
# toggle=purrr::set_names(c(1), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i=files_list[1]
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_root, "run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation #,
#commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization)#, valuation, commentary)
}
setwd("~/Dropbox/RHAPSODY/1_PROGRAMMING/1_r/6_unpivotr/Challenge")
rm(list=ls())
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = "."
path_code = file.path(path_root, "code") #, "1_source")
path_data = file.path(path_root, "data") #, "2_data")
#---------------------------------------------------------------------------------------------------------
files_list=list.files(path_data)
# files_list=files_list[-grep("xlsx", files_list)]
scenarios=as.vector(1:length(files_list), mode="list")
scenarios=purrr::set_names(scenarios, files_list)
toggle=purrr::set_names(c(1, 2), files_list)
# toggle=purrr::set_names(c(1), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i=files_list[1]
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_root, "run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation #,
#commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization)#, valuation, commentary)
}
load(file.path(path_root, "validate", "output", "target_output.rda"))
all.equal(scenarios, target) # TRUE
rm(list=ls())
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = "."
path_code = file.path(path_root, "code") #, "1_source")
path_data = file.path(path_root, "data") #, "2_data")
#---------------------------------------------------------------------------------------------------------
files_list=list.files(path_data)
# files_list=files_list[-grep("xlsx", files_list)]
scenarios=as.vector(1:length(files_list), mode="list")
scenarios=purrr::set_names(scenarios, files_list)
toggle=purrr::set_names(c(1, 2), files_list)
# toggle=purrr::set_names(c(1), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i=files_list[1]
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_root, "run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation #,
#commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization)#, valuation, commentary)
}
load(file.path(path_root, "validate", "output", "target_output.rda"))
all.equal(scenarios, target) # TRUE
all.equal(scenarios$RNFC_COMP1$capitalization, target$RNFC_COMP1$capitalization) # TRUE
all.equal(scenarios$RNFC_COMP1$valuation, target$RNFC_COMP1$valuation) # TRUE
all.equal(scenarios$RNFC_COMP2$valuation, target$RNFC_COMP2$valuation) # TRUE
all.equal(scenarios$RNFC_COMP1$valuation, target$RNFC_COMP1$valuation) # TRUE
all.equal(scenarios$RNFC_COMP2$valuation, target$RNFC_COMP2$valuation) # TRUE
all.equal(scenarios$RNFC_COMP1$security, target$RNFC_COMP1$security) # TRUE
rm(list=ls())
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = "."
path_code = file.path(path_root, "code") #, "1_source")
path_data = file.path(path_root, "data") #, "2_data")
#---------------------------------------------------------------------------------------------------------
files_list=list.files(path_data)
# files_list=files_list[-grep("xlsx", files_list)]
scenarios=as.vector(1:length(files_list), mode="list")
scenarios=purrr::set_names(scenarios, files_list)
toggle=purrr::set_names(c(1, 2), files_list)
# toggle=purrr::set_names(c(1), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i=files_list[1]
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_root, "run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation #,
#commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization)#, valuation, commentary)
}
load(file.path(path_root, "validate", "output", "target_output.rda"))
all.equal(scenarios, target) # TRUE
setwd("~/Desktop/untitled folder/3_db")
rm(list=ls())
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = ".."
path_code = file.path(path_root, "1_source")
path_data = file.path(path_root, "2_data")
#---------------------------------------------------------------------------------------------------------
files_list=list.files(path_data)
files_list=files_list[-grep("xlsx", files_list)]
scenarios=as.vector(1:length(files_list), mode="list")
scenarios=purrr::set_names(scenarios, files_list)
toggle=purrr::set_names(c(1, 2), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
# i="RNFC_COMP1"
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_code, "0_run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation,
commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization, valuation, commentary)
}
#---------------------------------------------------------------------------------------------------------
rm(i, l)
rm(xlsx_obj, xlsx_toggle, toggle) # xlsx_name
rm(path_code, path_data, files_list)
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
listviewer::jsonedit(scenarios)
scenarios
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
str(scenarios)
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
glimpse(scenarios)
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
listviewer::jsonedit(scenarios)
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
glimpse(scenarios)
listviewer::jsonedit(scenarios$RNFC_COMP1)
listviewer::jsonedit(scenarios$RNFC_COMP1$business)
listviewer::jsonedit(scenarios$RNFC_COMP1$security)
listviewer::jsonedit(scenarios$RNFC_COMP1$capitalization)
listviewer::jsonedit(scenarios$RNFC_COMP1$valuation)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary)
scenarios$RNFC_COMP1$commentary
str(scenarios$RNFC_COMP1$commentary)
scenarios$RNFC_COMP1$commentary$risk_classification
scenarios$RNFC_COMP1$commentary$valuation_impairment
scenarios$RNFC_COMP1$commentary$conclusion
scenarios$RNFC_COMP1$commentary$strengths_concerns
scenarios$RNFC_COMP1$commentary$calculations
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$risk_classification)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$valuation_impairment)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$strengths_concerns)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations)
scenarios$RNFC_COMP1$commentary$calculations
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$valuation_summary)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index)
scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$implied_dollar_price)
scenarios$RNFC_COMP1$commentary$calculations$implied_dollar_price
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield)
scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield)
scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield)
scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield)
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
attr(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield, "yield") <- NULL
attr(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield, "adj_mezzanine_index") <- NULL
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield)
# rm(scenarios)
#---------------------------------------------------------------------------------------------------------
# listviewer::jsonedit(COMPANY1)
# listviewer::jsonedit(COMPANY2)
# rm(COMPANY1, COMPANY2)
attr(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield$yield, "names") <- NULL
attr(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield$adj_mezzanine_index, "names") <- NULL
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield)
attr(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield$implied_yield, "names") <- NULL
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield)
str(scenarios$RNFC_COMP1$commentary$calculations$valuation_summary)
str(scenarios$RNFC_COMP1$commentary$calculations$implied_dollar_price)
attr(scenarios$RNFC_COMP1$commentary$calculations$implied_dollar_price$yield, "names") <- NULL
str(scenarios$RNFC_COMP1$commentary$calculations$implied_dollar_price)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$implied_dollar_price)
listviewer::jsonedit
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index)
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index)
get(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index, "period")
get
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$strengths_concerns)
listviewer::jsonedit(scenarios$RNFC_COMP1$commentary$valuation_impairment)
listviewer::jsonedit(scenarios$RNFC_COMP1$valuation)
str(scenarios$RNFC_COMP1$valuation$financial_performance)
str(scenarios$RNFC_COMP1$valuation$financial_performance$period)
str(scenarios$RNFC_COMP1$valuation$coverage_covenants)
str(scenarios$RNFC_COMP1$valuation$trading_levels)
str(scenarios$RNFC_COMP1$valuation$ma_comparables)
str(scenarios$RNFC_COMP1$valuation$public_comparables)
str(scenarios$RNFC_COMP1$valuation$dcf)
str(scenarios$RNFC_COMP1$valuation$summary)
scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index
scenarios$RNFC_COMP1$valuation$dcf
load("target_output.rda")
scenarios$RNFC_COMP1$valuation$dcf
scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index
scenarios$RNFC_COMP1$valuation$dcf
listviewer::jsonedit(scenarios)
# TODO:
# scenarios$RNFC_COMP1$commentary$calculations$mezzanine_index
# scenarios$RNFC_COMP1$valuation$dcf
# for(i in 1:length(files_list)){exec(assign, paste0("COMPANY", i), scenarios[[i]])}
str(scenarios$RNFC_COMP1$valuation$dcf)
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield$yield)
load("target_output.rda")
str(scenarios$RNFC_COMP1$commentary$calculations$mezzanine_yield$yield)
