behead(direction = "N", name = "security_id") %>%
behead(direction = "W", name = "element") %>%
mutate(
element = element %>% clean_names(),
security_id = security_id %>% clean_names()
) %>%
pack() %>%
select(security_id, element, value)
# Extract values from table into list of lists (match previous output)
security <- t_security$value %>%
purrr::set_names(t_security$element) %>%
split(t_security$security_id) %>% # list() %>%
set_names(
t_security %>%
filter(element=="description") %>%
pull() %>%
map_chr(~.x) %>%
clean_names()
)
if(xlsx_toggle==2){
security <- security %>%
map(
~.x %>%
modify_at(
c("issue_price_oid"),
~ifelse(is.character(.x), NA_real_, .x)
)
)
}
security
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
#i="RNFC_COMP2"
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_code, "0_run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation,
commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization, valuation, commentary)
}
rm(list=ls())
graphics.off()
#---------------------------------------------------------------------------------------------------------
library(dplyr)
#---------------------------------------------------------------------------------------------------------
path_root = "."
path_code = file.path(path_root, "1_source")
path_data = file.path(path_root, "2_data")
path_output = file.path(path_root, "3_output")
#---------------------------------------------------------------------------------------------------------
files_list=list.files(path_data)
files_list=files_list[-grep("xlsx", files_list)]
scenarios=as.vector(1:length(files_list), mode="list")
scenarios=purrr::set_names(scenarios, files_list)
toggle=purrr::set_names(c(1, 2), files_list)
#---------------------------------------------------------------------------------------------------------
for (i in files_list){
#i="RNFC_COMP2"
xlsx_toggle=toggle[[i]]
# xlsx_name=file.path("..", "2_data", i)
xlsx_obj <- file.path(path_data, i) %>% readRDS
wacc_cells <- xlsx_obj %>% filter(sheet == "WACC")
dcf_cells <- xlsx_obj %>% filter(sheet == "DCF")
if (xlsx_toggle==1){
summary_cells=xlsx_obj %>% filter(sheet == "Summary")
}else if (xlsx_toggle==2){
summary_cells=xlsx_obj %>% filter(sheet == "Valuation Summary")
}
source(file.path(path_code, "0_run.R"))
l=list(
business=business,
security=security,
capitalization=capitalization,
valuation=valuation,
commentary=commentary
)
scenarios[[i]]<-l
rm(business, security, capitalization, valuation, commentary)
}
for(i in 1:length(files_list)){exec(assign, paste0("COMPANY", i), scenarios[[i]])}
save(scenarios, file=file.path(path_output, "target_output.rda"))
# load(file.path(path_output, "target_output.rda"))
#---------------------------------------------------------------------------------------------------------
rm(i, l)
rm(xlsx_obj, xlsx_toggle, toggle) # xlsx_name
rm(path_root, path_code, path_data, path_output)
rm(files_list, scenarios)
rm(COMPANY1, COMPANY2)
setwd("~/Dropbox/TEACHING/Schools/1_NUS/Courses/2022/wip/PE/cases/3_private_equity/framework/4_reporting")
# Chunk 1
# https://rafael-zambrano-blog-ds.netlify.app/posts/automagic_tabs/
# https://www.linkedin.com/posts/rnfc_dba4761m5finalproject-activity-6875925555452153856-MCOz
library(DT)
library(rlang)
library(dplyr)
library(tidyr)
library(purrr)
library(tibble)
library(stringr)
library(sknifedatar)
# devtools::install_github("rafzamb/sknifedatar")
library(xaringanExtra)
# devtools::install_github("gadenbuie/xaringanExtra")
path_root=file.path("..") #, "framework")
path_output=file.path(path_root, "3_output")
load(file.path(path_output, "target_output.rda"))
options(
DT.options = list(
dom = 't', #dom = 'B',
buttons = I( c('csv', 'excel') ),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
"}")
)
)
xaringanExtra::use_panelset()
# Today, private equities are swimming in oceans of data, but what they are increasingly finding is that the costs associated with data analysis go far beyond the cost of the data itself. The value of any data set must be in excess of the costs incurred in getting it into a format that is usable. Often, this hurdle is not reached. Why?
# Chunk 2
scenarios <- scenarios %>% set_names(str_replace(names(.), "RNFC_", ""))
listviewer::jsonedit(scenarios)
# Chunk 3: business_description
out_business_description=map(
scenarios,
~.x$business %>%
map_dfc(~ifelse(length(.x)==1, .x, paste(.x, collapse=", ")))
) %>%
#datatable(rownames = FALSE) %>%
#bind_rows(.id="company") %>%
#nest(public_comparables=-company) %>%
tibble(
company=names(.),
business_description=.
) %>%
mutate(
business_description=map(
business_description,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
)
)
)
# Chunk 5: investment_strengths
out_investment_strengths=map(
scenarios,
~.x$commentary$strengths_concerns$strengths %>% as_tibble %>% rename(strength=value)
) %>%
#datatable(rownames = FALSE) %>%
#bind_rows(.id="company") %>%
#nest(public_comparables=-company) %>%
tibble(
company=names(.),
investment_strengths=.
) %>%
mutate(
investment_strengths=map(
investment_strengths,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
)
)
)
# Chunk 6: investment_concerns
out_investment_concerns=map(
scenarios,
~.x$commentary$strengths_concerns$concerns %>% as_tibble %>% rename(concern=value)
) %>%
#datatable(rownames = FALSE) %>%
#bind_rows(.id="company") %>%
#nest(public_comparables=-company) %>%
tibble(
company=names(.),
investment_concerns=.
) %>%
mutate(
investment_concerns=map(
investment_concerns,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
)
)
)
# Chunk 7: profitability_table
out_profitability=map(
scenarios,
~.x$valuation$financial_performance %>%
as_tibble() %>%
mutate(period=lubridate::ymd(period))
) %>%
bind_rows(.id="company") %>%
nest(profitability=-company) %>%
mutate(
profitability=map(
profitability,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(names(.x)[2:6], currency = "")
)
)
# Chunk 8: fcf_table
out_free_cash_flow=map(
scenarios,
~.x$valuation$dcf$estimates %>%
left_join(
.x$valuation$dcf$fcf %>% {
v <- .
tibble(
PERIOD=zoo::index(v),
FCF=zoo::coredata(v)
)
}
)
) %>%
bind_rows(.id="company") %>%
nest(free_cash_flow=-company) %>%
mutate(
free_cash_flow=map(
free_cash_flow,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(names(.x)[2:7], currency = "")
)
)
# Chunk 9: capitalization_closing_table
out_capitalization_closing=map(
scenarios,
~.x$capitalization$summary$vs$closing
) %>%
bind_rows(.id="company") %>%
nest(capitalization_closing=-company) %>%
mutate(
capitalization_closing=map(
capitalization_closing,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(names(.x)[c(2:15)], currency = "")
)
)
# Chunk 10: capitalization_closing_summary
map(
scenarios,
~.x$capitalization$closing %>% as_tibble
) %>%
bind_rows(.id="company") %>% {
v = names(.)
datatable(., caption ="Summary", rownames = FALSE) %>%
formatCurrency(v[c(3:13)], currency = "")
}
# Chunk 11: capitalization_current_table
out_capitalization_current=map(
scenarios,
~.x$capitalization$summary$vs$current
) %>%
bind_rows(.id="company") %>%
nest(capitalization_current=-company) %>%
mutate(
capitalization_current=map(
capitalization_current,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(names(.x)[c(2:15)], currency = "")
)
)
# Chunk 12: capitalization_current_summary
map(
scenarios,
~.x$capitalization$current %>% as_tibble
) %>%
bind_rows(.id="company") %>% {
v = names(.)
datatable(., caption ="Summary", rownames = FALSE) %>%
formatCurrency(v[c(3:13)], currency = "")
}
# Chunk 13: public_comparables
idx <- list(
list(c(4:7), NA),
list(c(4:8, 10:12), c(9))
)%>%
set_names(names(scenarios))
out_public_comparables=map(
scenarios,
~.x$valuation$public_comparables %>%
map_df(bind_rows, .id="sector")
) %>%
#bind_rows(.id="company") %>%
#nest(public_comparables=-company) %>%
tibble(
company=names(.),
public_comparables=.
) %>%
mutate(
public_comparables=map2(
company,
public_comparables,
~.y %>% {
v = names(.)
o = datatable(
.,
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(v[idx[[.x]][[1]]], currency = "")
if(!is.na(idx[[.x]][[2]])){
o %>% formatPercentage(v[idx[[.x]][[2]]], digits=2)
} else {
o
}
}
)
)
# Chunk 14: ma_comparables
out_ma_comparables=map(
scenarios,
~.x$valuation$ma_comparables %>%
map_dfc(~.x)
) %>%
#bind_rows(.id="company") %>%
#nest(public_comparables=-company) %>%
tibble(
company=names(.),
ma_comparables=.
) %>%
mutate(
ma_comparables=map(
ma_comparables,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(names(.x)[c(4:6)], currency = "")
)
)
# Chunk 15: wacc_valuation_table
out_wacc_valuation=map(
scenarios,
~.x$valuation$dcf$wacc$table
) %>%
bind_rows(.id="company") %>%
nest(wacc_valuation=-company) %>%
mutate(
wacc_valuation=map(
wacc_valuation,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(names(.x)[c(2:3, 5:7)], currency = "") %>%
formatPercentage(names(.x)[c(4, 8)], digits=2)
)
)
# Chunk 16: wacc_assumptions
map(
scenarios,
~.x$valuation$dcf$wacc$assumptions %>% as_tibble
) %>%
bind_rows(.id="company") %>% {
v = names(.)
datatable(., caption ="Assumptions", rownames = FALSE) %>%
formatPercentage(v[c(3:9)], digits = 2)
}
# (1) The pretax cost of debt is based on the yield of Baa corporate bonds on the valuation date as published in the Federal Reserve Statistical Release.
# Chunk 17: dcf_valuation_table
# scenarios$RNFC_COMP1$valuation$dcf -> see line 246 @ 45_valuation_wacc_dcf.R ->
#   dcf$dcf_tbl <- tidyr::crossing
out_dcf_valuation=map(
scenarios,
~.x$valuation$dcf$dcf_tbl
) %>%
bind_rows(.id="company") %>%
nest(dcf_valuation=-company) %>%
mutate(
dcf_valuation=map(
dcf_valuation,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(names(.x)[c(1, 3:6)], currency = "") %>%
formatPercentage(names(.x)[2], digits=2)
)
)
# Chunk 18: dcf_assumptions
map(
scenarios,
~c(
.x$valuation$dcf[8:9],
.x$valuation$dcf[2:4] %>%
modify_if(zoo::is.zoo, as.numeric),
wacc=.x$valuation$dcf$wacc[[3]],
.x$valuation$dcf[7]
) %>% as_tibble
) %>%
bind_rows(.id="company") %>% {
v = names(.)
datatable(., caption ="Assumptions", rownames = FALSE) %>%
formatCurrency(v[c(2:6, 8)], currency = "") %>%
formatPercentage(v[7], digits = 2)
}
# Chunk 19: valuation_analytics_table
out_weighted_valuation=map(
scenarios,
~.x$valuation$summary[7:10] %>% map_df(bind_rows, .id="method")
) %>%
bind_rows(.id="company") %>%
nest(weighted_valuation=-company) %>%
mutate(
weighted_valuation=map(
weighted_valuation,
~.x %>%
datatable(
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
) %>%
formatCurrency(names(.x)[c(2:3, 5:6)], currency = "") %>%
formatPercentage(names(.x)[c(4, 7)], digits=2)
)
)
# Chunk 20: valuation_notes
map(
scenarios,
~.x$commentary$valuation_impairment %>% as_tibble
) %>%
bind_rows(.id="company") %>%
rename(note=value) %>%
{
v = names(.)[-1]
datatable(., caption ="Impairment Notes", rownames = FALSE)
}
# Chunk 21: valuation_assumptions
map(
scenarios,
~.x$valuation$summary[1:6] %>% as_tibble
) %>%
bind_rows(.id="company") %>% {
v = names(.)[-1]
datatable(., caption ="Assumptions", rownames = FALSE) %>%
formatCurrency(v, currency = "")
}
idx <- list(
list(c(2:4, 6), c(5, 7)),
list(c(2:5), c(6:8))
)%>%
set_names(names(scenarios))
idx
map(
scenarios,
~ map_df(list(.x$security), bind_rows)
)
out_security_description=map(
scenarios,
~ map_df(list(.x$security), bind_rows)
) %>%
tibble(
company=names(.),
security_description=.
) %>%
mutate(
security_description=map2(
company,
security_description,
~.y %>% {
v = names(.)
datatable(
.,
rownames = FALSE #,
#extensions = c('Buttons', 'ColReorder', 'KeyTable', 'FixedColumns')
)  %>%
formatCurrency(v[idx[[.x]][[1]]], currency = "") %>%
formatPercentage(v[idx[[.x]][[2]]], digits=2)
}
)
)
View(out_security_description)
clean_names
rm(list=ls())
graphics.off()
library(purrr)
