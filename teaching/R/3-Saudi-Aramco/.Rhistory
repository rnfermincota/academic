# Effective Tax rate, Unlevered beta
unlevered.beta.f <- function(){
require(readxl)
# data_file <- file.path("data", "betaGlobal.xls")
# Unlevered Betas (Global)
url <- 'http://www.stern.nyu.edu/~adamodar/pc/datasets/betaGlobal.xls'
data_file <- download.f(url)
# A10:F106 -> Industry Name, Number of firms, Beta, D/E Ratio,
v <- read_excel(data_file, sheet = "Sheet1", range = "A10:F106") %>%
janitor::clean_names() %>%
filter(industry_name=="Oil/Gas (Integrated)") %>%
pull(unlevered_beta)
return(v)
}
ub <- unlevered.beta.f()
inputs <- ub %>%
set_names(c("UNLEVERED_BETA")) %>%
as.list %>% append(inputs)
listviewer::jsonedit(inputs)
# Chunk 14
marginal.tax.f <- function(){
require(readxl)
# data_file <- file.path("data", "countrytaxrates.xls")
url <- 'http://www.stern.nyu.edu/~adamodar/pc/datasets/countrytaxrates.xls'
data_file <- download.f(url)
# Corporate Marginal Tax Rates - By country
v <- read_excel(data_file, sheet = "Sheet1") %>%
janitor::clean_names() %>%
filter(country=="Saudi Arabia") %>%
pull(x2018)
return(v * 100)
}
mtr <- marginal.tax.f()
inputs <- mtr %>%
set_names(c("MARGINAL_TAX_RATE")) %>%
as.list %>% append(inputs)
listviewer::jsonedit(inputs)
# Chunk 15: valuation
equity.valuation.f <- function(inp){
for (j in 1:length(inp)) assign(names(inp)[j], inp[[j]])
#-------------------------------------------------------------------------------------
# Calculated inputs
EFFECTIVE_TAX_RATE <- INCOME_TAXES / INCOME_BEFORE_INCOME_TAXES
INVESTED_CAPITAL <- CAPITAL_EMPLOYED - CASH_AND_CASH_EQUIVALENTS
DEBT_RATIO <- TOTAL_BORROWINGS / ( TOTAL_BORROWINGS + TOTAL_EQUITY )
COST_DEBT <- ( CREDIT_SPREAD + TREASURY_YIELD_10YR ) / 100
COST_EQUITY <- ( TREASURY_YIELD_10YR + UNLEVERED_BETA * EQUITY_RISK_PREMIUM ) / 100
COST_CAPITAL <- COST_DEBT * ( 1 - ( MARGINAL_TAX_RATE / 100 ) ) * DEBT_RATIO +
COST_EQUITY * ( 1 - DEBT_RATIO )
NUMBER_YEARS <- LONG_RESERVES_LIFE
#-------------------------------------------------------------------------------------
# Free Cash Flow to Equity (FCFE)
EXPECTED_RETURN_EQUITY <- NET_INCOME / SHAREHOLDERS_EQUITY
EXPECTED_GROWTH_EARNINGS <- GDP_GROWTH / 100
PAYOUT_RATIO <- 1 - EXPECTED_GROWTH_EARNINGS / EXPECTED_RETURN_EQUITY
VALUE_EQUITY <- NET_INCOME * PAYOUT_RATIO *
( 1 - ( ( 1 + EXPECTED_GROWTH_EARNINGS ) ^ NUMBER_YEARS /
( 1 + COST_EQUITY ) ^ NUMBER_YEARS ) ) /
( COST_EQUITY - EXPECTED_GROWTH_EARNINGS )
FCFE_EQUITY_VALUATION <- VALUE_EQUITY + CASH_AND_CASH_EQUIVALENTS +
INVESTMENT_JOINT_VENTURES_ASSOCIATES + INVESTMENT_SECURITIES
#-------------------------------------------------------------------------------------
# Free Cash Flow to Firm (FCFF)
EXPECTED_GROWTH_RATE <- GDP_GROWTH / 100
EXPECTED_ROIC <- OPERATING_INCOME * ( 1 - EFFECTIVE_TAX_RATE ) / INVESTED_CAPITAL
REINVESTMENT_RATE <- EXPECTED_GROWTH_RATE / EXPECTED_ROIC
EXPECTED_OPERATING_INCOME_AFTER_TAX <- OPERATING_INCOME *
( 1 - EFFECTIVE_TAX_RATE ) * ( 1 + EXPECTED_GROWTH_RATE )
EXPECTED_FCFF <- EXPECTED_OPERATING_INCOME_AFTER_TAX * ( 1 - REINVESTMENT_RATE )
VALUE_OPERATING_ASSETS <- EXPECTED_FCFF *
( 1 - ( ( 1 + EXPECTED_GROWTH_RATE ) ^ NUMBER_YEARS /
( 1 + COST_CAPITAL ) ^ NUMBER_YEARS ) ) /
( COST_CAPITAL - EXPECTED_GROWTH_RATE )
FCFF_EQUITY_VALUATION <- VALUE_OPERATING_ASSETS + CASH_AND_CASH_EQUIVALENTS +
INVESTMENT_JOINT_VENTURES_ASSOCIATES + INVESTMENT_SECURITIES -
TOTAL_BORROWINGS - NON_CONTROLLING_INTERESTS
#-------------------------------------------------------------------------------------
# Use set_names to name the elements of the vector
out <- c(INVESTED_CAPITAL, DEBT_RATIO, EFFECTIVE_TAX_RATE) %>%
set_names(c("INVESTED_CAPITAL", "DEBT_RATIO", "EFFECTIVE_TAX_RATE"))
out <- c(NUMBER_YEARS, COST_CAPITAL, COST_EQUITY, COST_DEBT) %>%
set_names(c("NUMBER_YEARS", "COST_CAPITAL", "COST_EQUITY", "COST_DEBT")) %>%
as.list %>% append(out)
out <- c(FCFE_EQUITY_VALUATION, VALUE_EQUITY, PAYOUT_RATIO,
EXPECTED_GROWTH_EARNINGS, EXPECTED_RETURN_EQUITY) %>%
set_names(c("FCFE_EQUITY_VALUATION", "VALUE_EQUITY", "PAYOUT_RATIO",
"EXPECTED_GROWTH_EARNINGS", "EXPECTED_RETURN_EQUITY")) %>%
as.list %>% append(out)
out <- c(FCFF_EQUITY_VALUATION, VALUE_OPERATING_ASSETS, EXPECTED_FCFF,
EXPECTED_OPERATING_INCOME_AFTER_TAX, REINVESTMENT_RATE,
EXPECTED_ROIC, EXPECTED_GROWTH_RATE) %>%
set_names(c("FCFF_EQUITY_VALUATION", "VALUE_OPERATING_ASSETS", "EXPECTED_FCFF",
"EXPECTED_OPERATING_INCOME_AFTER_TAX", "REINVESTMENT_RATE",
"EXPECTED_ROIC", "EXPECTED_GROWTH_RATE")) %>%
as.list %>% append(out)
#-------------------------------------------------------------------------------------
return(out)
}
output <- equity.valuation.f(inputs)
listviewer::jsonedit(output)
output <- equity.valuation.f(inputs)
# f <- file.path("data", "saudi-aramco-prospectus-en.pdf")
download.f <- function(url) {
data.folder = file.path(getwd(), 'data')  # setup temp folder
if (!dir.exists(data.folder)){dir.create(data.folder, F)}
filename = file.path(data.folder, basename(url))
if(!file.exists(filename))
tryCatch({ download.file(url, filename, mode='wb') },
error = function(ex) cat('', file=filename))
filename
}
extract.values.f <- function(pdf.file, page, names){
require(tabulizer)
require(fuzzyjoin) # regex_inner_join
# https://www.saudiaramco.com/-/media/images/investors/saudi-aramco-prospectus-en.pdf
area = case_when( # tabulizer::locate_areas(f, pages = 222, widget = "shiny")
page == 220  ~ c(459.77, 69.76, 601, 427.98), # Table 42 (pg 131)
page == 221  ~ c(168.03, 69.76, 394.53, 404.59), # Table 43 (pg 132)
page == 222  ~ c(180.11, 68.38, 413.04, 412.05), # Table 45 (pg 133)
page == 233  ~ c(181.57, 70.99, 673.96, 448.91) # Table 52 (pg 144)
)
extract_tables(
pdf.file, pages = page, area = list(area),
guess = FALSE, output = "data.frame"
) %>%
purrr::pluck(1) %>%
map_dfc(~trimws(gsub("\\.|[[:punct:]]", "", .x))) %>%
set_names( c("Heading", paste0("X", if(page==233){1:4}else{0:4})) ) %>%
regex_inner_join(
data.frame(regex_name = names, stringsAsFactors = FALSE),
by = c(Heading = "regex_name")
) %>%
select(X4) %>%
pull %>%
as.numeric
}
prospectus.pdf <- 'https://www.saudiaramco.com/-/media/images/investors/saudi-aramco-prospectus-en.pdf' %>%
download.f(.)
# lines_text <- raw_text %>% read_lines()
# lines_text[lines_text %>% str_which("proved reserves life")] %>%
inputs <- prospectus.pdf %>%
pdf_text() %>% read_lines() %>%
grep("proved reserves life", ., value = TRUE) %>%
str_match_all("[0-9]+") %>%
purrr::pluck(1) %>%
unlist %>% first() %>% as.numeric() %>%
set_names(c("LONG_RESERVES_LIFE")) %>% as.list
listviewer::jsonedit(inputs)
# Table 42 - Gearing and reconciliation
inputs <- extract.values.f(prospectus.pdf, 220,
c("Total borrowings", "Cash and cash equivalents", "Total equity")
) %>%
set_names(c("TOTAL_BORROWINGS", "CASH_AND_CASH_EQUIVALENTS", "TOTAL_EQUITY")) %>%
as.list %>% append(inputs)
listviewer::jsonedit(inputs)
# Table 42 - Gearing and reconciliation
inputs <- extract.values.f(prospectus.pdf, 220,
c("Total borrowings", "Cash and cash equivalents", "Total equity")
) %>%
set_names(c("TOTAL_BORROWINGS", "CASH_AND_CASH_EQUIVALENTS", "TOTAL_EQUITY")) %>%
as.list %>% append(inputs)
# f <- file.path("data", "saudi-aramco-prospectus-en.pdf")
download.f <- function(url) {
data.folder = file.path(getwd(), 'data')  # setup temp folder
if (!dir.exists(data.folder)){dir.create(data.folder, F)}
filename = file.path(data.folder, basename(url))
if(!file.exists(filename))
tryCatch({ download.file(url, filename, mode='wb') },
error = function(ex) cat('', file=filename))
filename
}
extract.values.f <- function(pdf.file, page, names){
require(tabulizer)
require(fuzzyjoin) # regex_inner_join
# https://www.saudiaramco.com/-/media/images/investors/saudi-aramco-prospectus-en.pdf
area = case_when( # tabulizer::locate_areas(f, pages = 222, widget = "shiny")
page == 220  ~ c(459.77, 69.76, 601, 427.98), # Table 42 (pg 131)
page == 221  ~ c(168.03, 69.76, 394.53, 404.59), # Table 43 (pg 132)
page == 222  ~ c(180.11, 68.38, 413.04, 412.05), # Table 45 (pg 133)
page == 233  ~ c(181.57, 70.99, 673.96, 448.91) # Table 52 (pg 144)
)
extract_tables(
pdf.file, pages = page, area = list(area),
guess = FALSE, output = "data.frame"
) %>%
purrr::pluck(1) %>%
map_dfc(~trimws(gsub("\\.|[[:punct:]]", "", .x))) %>%
set_names( c("Heading", paste0("X", if(page==233){1:4}else{0:4})) ) %>%
regex_inner_join(
data.frame(regex_name = names, stringsAsFactors = FALSE),
by = c(Heading = "regex_name")
) %>%
select(X4) %>%
pull %>%
as.numeric
}
extract_tables
library(knitr)
library(kableExtra)
library(ggpage)
library(magrittr)
library(tidyverse)
library(WDI)
library(pdftools)
library(tabulizer)
extract_tables
extract_tables
library(tabulizer)
library(tabulizer)
Sys.setenv(JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/")
library(knitr)
library(kableExtra)
library(ggpage)
library(magrittr)
library(tabulizer)
library(tabulizer)
map2_dfr
year=2019
# Data is generally updated at the end of each business day
rate_url <- paste(
'https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yieldYear&year=',
year,
sep=''
)
#  1 mo, 2 mo, 3 mo, 6 mo, 1 yr, 2 yr, 3 yr, 5 yr, 7 yr, 10 yr, 20 yr, 30 yr
rates_raw <- read_html(rate_url) %>%
html_node('.t-chart') %>%
html_table()
library(rvest)
year=2019
# Data is generally updated at the end of each business day
rate_url <- paste(
'https://www.treasury.gov/resource-center/data-chart-center/interest-rates/Pages/TextView.aspx?data=yieldYear&year=',
year,
sep=''
)
#  1 mo, 2 mo, 3 mo, 6 mo, 1 yr, 2 yr, 3 yr, 5 yr, 7 yr, 10 yr, 20 yr, 30 yr
rates_raw <- read_html(rate_url) %>%
html_node('.t-chart') %>%
html_table()
year=2019
# Data is generally updated at the end of each business day
rate_url <- paste(
'https://home.treasury.gov/resource-center/data-chart-center/interest-rates/TextView?data=yieldYear&year=',
year,
sep=''
)
#  1 mo, 2 mo, 3 mo, 6 mo, 1 yr, 2 yr, 3 yr, 5 yr, 7 yr, 10 yr, 20 yr, 30 yr
rates_raw <- read_html(rate_url) %>%
html_node('.t-chart') %>%
html_table()
quantmod::getSymbols.FRED("DGS10", env = .GlobalEnv)
na.locf(DGS10)/100
library(quantmod)
getSymbols.FRED("DGS10", env = .GlobalEnv)
na.locf(DGS10)/100
rates_raw <- na.locf(DGS10)/100
rates_raw <- na.locf(DGS10)/100
rates_raw <- rates_raw %>%
timetk::tk_tbl(rename_index="date")
View(rates_raw)
rates <- rates_raw %>%
clean_names(.) %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
library(dplyr)
library(quantmod)
getSymbols.FRED("DGS10", env = .GlobalEnv)
rates_raw <- na.locf(DGS10)/100
rates_raw <- rates_raw %>%
timetk::tk_tbl(rename_index="date")
rates <- rates_raw %>%
clean_names(.) %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
View(rates_raw)
rates_raw <- na.locf(DGS10)/100
rates_raw <- rates_raw %>%
timetk::tk_tbl(rename_index="date") %>%
rename(rate=DGS10)
rates <- rates_raw %>%
clean_names(.) %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
rates <- rates_raw %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
View(rates)
summary <- rates %>%
select(-date) %>%
group_by(month) %>%
summarise_all(list(mean))
View(summary)
rates_raw <- na.locf(DGS10)/100
rates_raw['2020/']
rates_raw <- rates_raw['2020/'] %>%
timetk::tk_tbl(rename_index="date") %>%
rename(rate=DGS10)
rates <- rates_raw %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
summary <- rates %>%
select(-date) %>%
group_by(month) %>%
summarise_all(list(mean))
year=2019
paste0(year, "/")
getSymbols.FRED("DGS10", env = .GlobalEnv)
rates_raw <- na.locf(DGS10)/100
getSymbols.FRED("DGS10")
environment()
.GlobalEnv
getSymbols.FRED("DGS10", env = environment())
rates_raw <- na.locf(DGS10)/100
getSymbols.FRED
getSymbols.FRED("DGS10", env = environment())
rates_raw <- na.locf(DGS10)/100
rates_raw <- rates_raw[paste0(year, "/")] %>%
timetk::tk_tbl(rename_index="date") %>%
rename(rate=DGS10)
treasury.rates.f <- function(year=2019){
require(quantmod)
# year=calendar year to pull results for
getSymbols.FRED("DGS10", env = environment())
rates_raw <- na.locf(DGS10)/100
rates_raw <- rates_raw[paste0(year, "/")] %>%
timetk::tk_tbl(rename_index="date") %>%
rename(rate=DGS10)
# Returns treasury rates for the given duration
rates <- rates_raw %>%
# clean_names(.) %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
summary <- rates %>%
select(-date) %>%
group_by(month) %>%
summarise_all(list(mean))
return(summary)
}
rates <- treasury.rates.f(2019) # last update dec 7, 2019
rm(DGS10)
treasury.rates.f <- function(year=2019){
require(quantmod)
# year=calendar year to pull results for
getSymbols.FRED("DGS10", env = environment())
rates_raw <- na.locf(DGS10)/100
rates_raw <- rates_raw[paste0(year, "/")] %>%
timetk::tk_tbl(rename_index="date") %>%
rename(rate=DGS10)
# Returns treasury rates for the given duration
rates <- rates_raw %>%
# clean_names(.) %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
summary <- rates %>%
select(-date) %>%
group_by(month) %>%
summarise_all(list(mean))
return(summary)
}
rates <- treasury.rates.f(2019) # last update dec 7, 2019
rates
treasury.rates.f <- function(year=2019){
require(quantmod)
# year=calendar year to pull results for
getSymbols.FRED("DGS10", env = environment())
rates_raw <- na.locf(DGS10)/100
rates_raw <- rates_raw[paste0(year, "/")] %>%
timetk::tk_tbl(rename_index="date") %>%
rename(rate=DGS10)
# Returns treasury rates for the given duration
rates <- rates_raw %>%
# clean_names(.) %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
summary <- rates %>%
select(-date) %>%
group_by(month) %>%
summarise_all(list(mean))
return(summary)
}
rates <- treasury.rates.f(2019) # last update dec 7, 2019
rates
rates %>%
select(rate)
rates %>%
select(rate) %>%
slice(n())
rates %>%
select(rate) %>%
slice(n()) %>% # Dec 10_yr Avg.
pull %>%
rates %>%
select(rate) %>%
slice(n()) %>% # Dec 10_yr Avg.
pull %>%
set_names(c("TREASURY_YIELD_10YR"))
path_root="."
path_data=file.path(path_root, "data")
treasury.rates.f <- function(year=2019){
require(quantmod)
# year=calendar year to pull results for
getSymbols.FRED("DGS10", env = environment())
rates_raw <- na.locf(DGS10)
rates_raw <- rates_raw[paste0(year, "/")] %>%
timetk::tk_tbl(rename_index="date") %>%
rename(rate=DGS10)
# Returns treasury rates for the given duration
rates <- rates_raw %>%
# clean_names(.) %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
summary <- rates %>%
select(-date) %>%
group_by(month) %>%
summarise_all(list(mean))
return(summary)
}
rates <- treasury.rates.f(2019)
save(rates, file="data/treasury_rates.rda")
# rates <- treasury.rates.f(2019)
# save(rates, file="data/treasury_rates.rda")
load(file="data/treasury_rates.rda")
View(rates)
treasury.rates.f <- function(year=2019){
require(quantmod)
# year=calendar year to pull results for
getSymbols.FRED("DGS10", env = environment())
rates_raw <- na.locf(DGS10)
rates_raw <- rates_raw[paste0(year, "/")] %>%
timetk::tk_tbl(rename_index="date") %>%
rename(trates=DGS10)
# Returns treasury rates for the given duration
rates <- rates_raw %>%
# clean_names(.) %>%
mutate(
date = as.Date(date, "%m/%d/%y"),
month = factor(months(date), levels=month.name)
) %>%
mutate_at(
vars(-one_of("date", "month")),
as.numeric
)
summary <- rates %>%
select(-date) %>%
group_by(month) %>%
summarise_all(list(mean))
return(summary)
}
treasury_rates <- treasury.rates.f(2019)
save(treasury_rates, file="data/treasury_rates.rda")
load(file="data/treasury_rates.rda")
inputs <- treasury_rates %>%
select(trates) %>%
slice(n()) %>% # Dec 10_yr Avg.
pull %>%
set_names(c("TREASURY_YIELD_10YR")) %>%
as.list %>% append(inputs)
