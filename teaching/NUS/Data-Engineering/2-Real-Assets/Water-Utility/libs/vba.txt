' Coded by Rafael Nicolas Fermin Cota

Function WATER_UTILITY_SAMPLING_FUNC(ByRef INPUTS_RNG As Variant, _
Optional ByVal RISK_FLAG As Boolean = False)
' Balancing of tariffs, subsidies, and coverage targets
' Choosing the distribution of costs and benefits among stakeholders
' Allocating risk


Dim h As Long
Dim i As Long
Dim j As Long
Dim k As Long
Dim l As Long

'Dim NROWS As Long
Dim NCOLUMNS As Long

Dim NA_STR As String
Dim DIV0_STR As String
Dim HEADINGS_STR As String
Dim TEMP_MATRIX As Variant
Dim INPUTS_ARR As Variant

Dim TEMP_VAL As Double
Dim TEMP1_SUM As Double
Dim TEMP2_SUM As Double
Dim TEMP3_SUM As Double
Dim TFLAG1_VAL As Boolean
Dim TFLAG2_VAL As Boolean
Dim DDEMAND_VAL As Double
Dim TDEMAND_VAL As Double
Dim RANDOM_VAL As Double

------
'STEP 1: DECLARE INPUT VARIABLES HERE
Dim CONTRACT_LENGTH_VAL As Double

Dim INFLATION_CURRENT_VAL As Double
Dim INFLATION_SPEED_ADJUSTMENT_VAL As Double
Dim INFLATION_LONG_TERM_VAL As Double
Dim INFLATION_VOLATILITY_VAL As Double
Dim INFLATION_INITIAL_CPI_VAL As Double
Dim INFLATION_INITIAL_DEFLATION_FACTOR_VAL As Double

Dim EXCHANGE_RATE_CURRENT_VAL As Double 'local currencies per FOREIGN currency
Dim EXCHANGE_RATE_DEPRECIATION_VAL As Double
Dim EXCHANGE_RATE_VOLATILITY_VAL As Double

Dim DISCOUNT_INITIAL_FACTOR_VAL As Double
Dim DISCOUNT_RATE_VAL As Double

Dim CUSTOMERS_CURRENT_VAL As Double
Dim CUSTOMERS_ANNUAL_GROWTH_VAL As Double

Dim SERVICE_COVERAGE_CURRENT_VAL As Double
Dim SERVICE_COVERAGE_TARGET_VAL As Double
Dim SERVICE_COVERAGE_YEAR_VAL As Long

Dim DEMAND_CURRENT_VAL As Double
Dim DEMAND_OTHER_SOURCES_VAL As Double
Dim DEMAND_ANNUAL_GROWTH_VAL As Double
Dim DEMAND_VOLATILITY_VAL As Double
Dim DENOMINATIONS_WATER_VOLUMES_VAL As Double

Dim NON_REVENUE_WATER_CURRENT_VAL As Double
Dim NON_REVENUE_WATER_TARGET_VAL As Double
Dim NON_REVENUE_WATER_YEAR_VAL As Long

Dim COLLECTION_RATE_CURRENT_VAL As Double
Dim COLLECTION_RATE_TARGET_VAL As Double
Dim COLLECTION_RATE_YEAR_VAL As Long

Dim DENOMINATIONS_MONETARY_VAL As Double
Dim INVESTMENT_COST_PER_NEW_CONNECTION_LOCAL_CURRENCY_VAL As Double

Dim FIXED_OPERATING_COSTS_EXISTING_PERCENT_INVESTMENT_COST_PER_CONNECTION_VAL As Double
Dim FIXED_OPERATING_COSTS_EXISTING_COST_VAL As Double
Dim FIXED_OPERATING_COSTS_ANNUAL_REAL_GROWTH_RATE_VAL As Double
Dim FIXED_OPERATING_COSTS_PROPORTION_OF_COSTS_DENOMINATED_IN_FOREIGN_CURRENCY_VAL As Double

Dim VARIABLE_OPERATING_COSTS_EXISTING_COST_VAL As Double
Dim VARIABLE_OPERATING_COSTS_ANNUAL_REAL_GROWTH_RATE_VAL As Double
Dim VARIABLE_OPERATING_COSTS_PROPORTION_OF_COSTS_DENOMINATED_IN_FOREIGN_CURRENCY_VAL As Double

Dim PERCENTAGE_FUNDED_BY_DEBT_VAL As Double
Dim LOAN_FOREIGN_CURRENCY_VAL As Boolean
Dim LOAN_PERIOD_VAL As Double
Dim LOAN_PERIOD_GRACE_VAL As Double

Dim FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL As Double
Dim FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_CONTRACTING_AUTHORITY_VAL As Double
Dim INTEREST_RATE_VAL As Double

Dim ASSET_BASE_INITIAL_LOCAL_CURRENCY_VAL As Double
Dim ASSET_BASE_DEPRECIATION_RATE_VAL As Double

Dim TARIFF_REVIEW_PERIOD_VAL As Double
Dim ANNUAL_FIXED_FEES_PAYMENT_LOCAL_CURRENCY_VAL As Double

Dim EXISTING_TARIFF_CONNECTED_VAL As Double
Dim EXISTING_TARIFF_OTHER_VAL As Double
Dim EXISTING_TARIFF_COPYING_COST_VAL As Double

Dim WTP_CONNECTION_VAL As Double
Dim WTP_OTHER_VAL As Double
Dim WTP_COPYING_COST_VAL As Double

------


GoSub INPUTS_LINE: GoSub HEADINGS_LINE: GoSub CALCS_LINE
WATER_UTILITY_SAMPLING_FUNC = TEMP_MATRIX

Exit Function

HEADINGS_LINE:


HEADINGS_STR = "PERIODS,I) ECONOMIC FACTORS: INFLATION,I) ECONOMIC FACTORS: CONSUMER PRICE INDEX,I) ECONOMIC FACTORS: DEFLATION FACTOR,I) ECONOMIC FACTORS: REAL EXCHANGE RATE,I) ECONOMIC FACTORS: NOMINAL EXCHANGE RATE,I) ECONOMIC FACTORS: DISCOUNT FACTOR,"
HEADINGS_STR = HEADINGS_STR & "II) CONSUMPTION: POTENTIAL CONNECTIONS,II) CONSUMPTION: COVERAGE,II) CONSUMPTION: CONNECTIONS,II) CONSUMPTION: NEW CONNECTIONS,II) CONSUMPTION: DEMAND (L/CONNECTION/DAY),II) CONSUMPTION: TOTAL DEMAND (M3),II) CONSUMPTION: NON-REVENUE WATER,II) CONSUMPTION: COLLECTION RATE FORECAST,"
HEADINGS_STR = HEADINGS_STR & "III) COSTS & SUBSIDIES: OPERATING FIXED COSTS - DOMESTIC DENOMINATION,III) COSTS & SUBSIDIES: OPERATING FIXED COSTS - FOREIGN DENOMINATION,III) COSTS & SUBSIDIES: OPERATING VARIABLE COSTS - DOMESTIC DENOMINATION,III) COSTS & SUBSIDIES: OPERATING VARIABLE COSTS - FOREIGN DENOMINATION,"
HEADINGS_STR = HEADINGS_STR & "IV) FINANCING COSTS: COVERAGE EXTENSION COSTS,IV) FINANCING COSTS: AMOUNT FINANCED BY DEBT,IV) FINANCING COSTS: TOTAL LOAN REPAYMENT (FOREIGN CURRENCY),IV) FINANCING COSTS: OUTSTANDING PRINCIPAL,IV) FINANCING COSTS: PRINICPAL REPAYMENT,IV) FINANCING COSTS: INTEREST PAYMENT,IV) FINANCING COSTS: OPERATOR - OUTSTANDING PRINCIPAL,IV) FINANCING COSTS: OPERATOR - PRINCIPAL REPAYMENT,IV) FINANCING COSTS: OPERATOR - INTEREST PAYMENT,IV) FINANCING COSTS: CONTRACTING AUTHORITY - OUTSTANDING PRINCIPAL,IV) FINANCING COSTS: CONTRACTING AUTHORITY - PRINCIPAL REPAYMENT,IV) FINANCING COSTS: CONTRACTING AUTHORITY - INTEREST PAYMENT,"

HEADINGS_STR = HEADINGS_STR & "V) TARIFF RESET CALCULATIONS: EXPECTED INFLATION RATE - FORECAST USED FOR TARIFF SETTING,V) TARIFF RESET CALCULATIONS: EXPECTED INFLATION RATE - DEFLATION FACTOR,V) TARIFF RESET CALCULATIONS: ASSET BASE (NOMINAL) - INITIAL EXISTING ASSET BASE,V) TARIFF RESET CALCULATIONS: ASSET BASE (NOMINAL) - DEPRECIATION,V) TARIFF RESET CALCULATIONS: ASSET BASE (NOMINAL) - MAINTENANCE COSTS,V) TARIFF RESET CALCULATIONS: ASSET BASE (NOMINAL) - FINAL EXISTING ASSET BASE,V) TARIFF RESET CALCULATIONS: ASSET BASE (NOMINAL) - INITIAL NEW ASSET BASE,V) TARIFF RESET CALCULATIONS: ASSET BASE (NOMINAL) - INVESTMENT,V) TARIFF RESET CALCULATIONS: ASSET BASE (NOMINAL) - DEPRECIATION,V) TARIFF RESET CALCULATIONS: ASSET BASE (NOMINAL) - FINAL NEW ASSET BASE,"
HEADINGS_STR = HEADINGS_STR & "V) TARIFF RESET CALCULATIONS: DEMAND - NO RESET,V) TARIFF RESET CALCULATIONS: DEMAND - FULL RESET,V) TARIFF RESET CALCULATIONS: DEMAND - DISCOUNTED DEMAND,V) TARIFF RESET CALCULATIONS: DEMAND - CUMULATIVE DISCOUNTED DEMAND,V) TARIFF RESET CALCULATIONS: DEMAND - " & TARIFF_REVIEW_PERIOD_VAL & " YEAR DISCOUNTED DEMAND,V) TARIFF RESET CALCULATIONS: RETURN ON NEW ASSETS (REAL) - CONTRACTING AUTHORITY,V) TARIFF RESET CALCULATIONS: RETURN ON NEW ASSETS (REAL) - OPERATOR,V) TARIFF RESET CALCULATIONS: DEPRECIATION (REAL) - CONTRACTING AUTHORITY,V) TARIFF RESET CALCULATIONS: DEPRECIATION (REAL) - OPERATOR,V) TARIFF RESET CALCULATIONS: MAINTENANCE COSTS (REAL),"
HEADINGS_STR = HEADINGS_STR & "V) TARIFF RESET CALCULATIONS: DOMESTIC-DENOMINATED OPEX (REAL),V) TARIFF RESET CALCULATIONS: FOREIGN-DENOMINATED OPEX (REAL),V) TARIFF RESET CALCULATIONS: FOREIGN EXCHANGE RATE - NO RESET,V) TARIFF RESET CALCULATIONS: FOREIGN EXCHANGE RATE - FULL RESET,V) TARIFF RESET CALCULATIONS: SUBSIDIES (REAL),V) TARIFF RESET CALCULATIONS: REVENUE REQUIREMENT (REAL) - CONTRACTING AUTHORITY - REVENUE REQUIREMENT,V) TARIFF RESET CALCULATIONS: REVENUE REQUIREMENT (REAL) - CONTRACTING AUTHORITY - DISCOUNTED REVENUE REQUIREMENT,V) TARIFF RESET CALCULATIONS: REVENUE REQUIREMENT (REAL) - CONTRACTING AUTHORITY - CUMULATIVE DISCOUNTED REVENUE REQUIREMENT,V) TARIFF RESET CALCULATIONS: REVENUE REQUIREMENT (REAL) - OPERATOR - REVENUE REQUIREMENT,V) TARIFF RESET CALCULATIONS: REVENUE REQUIREMENT (REAL) - OPERATOR - DISCOUNTED REVENUE REQUIREMENT,"
HEADINGS_STR = HEADINGS_STR & "V) TARIFF RESET CALCULATIONS: REVENUE REQUIREMENT (REAL) - OPERATOR - CUMULATIVE DISCOUNTED REVENUE REQUIREMENT,V) TARIFF RESET CALCULATIONS: DISCOUNTED REVENUE REQUIREMENT - CONTRACTING AUTHORITY,V) TARIFF RESET CALCULATIONS: DISCOUNTED REVENUE REQUIREMENT - OPERATOR,V) TARIFF RESET CALCULATIONS: REVENUE REQUIRED PER M3 - NO RESET - CONTRACTING AUTHORITY,V) TARIFF RESET CALCULATIONS: REVENUE REQUIRED PER M3 - NO RESET - OPERATOR,V) TARIFF RESET CALCULATIONS: REVENUE REQUIRED PER M3 - " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD - CONTRACTING AUTHORITY,V) TARIFF RESET CALCULATIONS: REVENUE REQUIRED PER M3 - " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD - OPERATOR,"

HEADINGS_STR = HEADINGS_STR & "VI) TARIFF INDEXATION: INDEXATION,VI) TARIFF INDEXATION: NO RESET - CONTRACTING AUTHORITY,VI) TARIFF INDEXATION: NO RESET - OPERATOR,VI) TARIFF INDEXATION: " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD - CONTRACTING AUTHORITY,VI) TARIFF INDEXATION: " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD - OPERATOR,"
HEADINGS_STR = HEADINGS_STR & "VII) PROFIT: TOTAL REVENUE COLLECTED - NO RESET,VII) PROFIT: TOTAL REVENUE COLLECTED - " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD,VII) PROFIT: COSTS - OPERATING COSTS,VII) PROFIT: COSTS - MAINTENANCE COSTS,VII) PROFIT: COSTS - RETURN ON CAPITAL,VII) PROFIT: COSTS - DEPRECIATION,VII) PROFIT: COSTS - SUBSIDIES,VII) PROFIT: COSTS - TOTAL,VII) PROFIT: PRESENT VALUE PROFIT (REAL) - NO RESET,VII) PROFIT: PRESENT VALUE PROFIT (REAL) - " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD,"
HEADINGS_STR = HEADINGS_STR & "VIII) CASH FLOWS: NO RESET - CONTRACTING AUTHORITY,VIII) CASH FLOWS: NO RESET - OPERATOR,VIII) CASH FLOWS: " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD - CONTRACTING AUTHORITY,VIII) CASH FLOWS: " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD - OPERATOR,"
HEADINGS_STR = HEADINGS_STR & "IX) DEBT SERVICE RATIO: CASH FLOW BEFORE LOAN REPAYMENT - NO RESET,IX) DEBT SERVICE RATIO: CASH FLOW BEFORE LOAN REPAYMENT - " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD,IX) DEBT SERVICE RATIO: DEBT SERVICE RATIO - NO RESET,IX) DEBT SERVICE RATIO: DEBT SERVICE RATIO - " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD,"

'Compares welfare change for currently connected and currently unconnected households.
HEADINGS_STR = HEADINGS_STR & "X) STAKEHOLDER ANALYSIS: WATER USE & CONSUMPTION - PRIVATE HOUSEHOLD CONNECTION,X) STAKEHOLDER ANALYSIS: WATER USE & CONSUMPTION - OTHER SOURCES,X) STAKEHOLDER ANALYSIS: MONTHLY COST - PRIVATE HOUSEHOLD CONNECTION - " & TARIFF_REVIEW_PERIOD_VAL & " YEAR RESET PERIOD,X) STAKEHOLDER ANALYSIS: MONTHLY COST - PRIVATE HOUSEHOLD CONNECTION - EXISTING TARIFFS,X) STAKEHOLDER ANALYSIS: OTHER SOURCES,X) STAKEHOLDER ANALYSIS: MONTHLY COPING COST - OTHER SOURCES,X) STAKEHOLDER ANALYSIS: WILLINGNESS TO PAY - PRIVATE HOUSEHOLD CONNECTION,X) STAKEHOLDER ANALYSIS: WILLINGNESS TO PAY - OTHER SOURCES - MONTHLY COST,X) STAKEHOLDER ANALYSIS: WILLINGNESS TO PAY - OTHER SOURCES - MONTHLY COPING COST,X) STAKEHOLDER ANALYSIS: CHANGE IN SOCIAL WELFARE (REAL) - PRIVATE HOUSEHOLD CONNECTION,X) STAKEHOLDER ANALYSIS: CHANGE IN SOCIAL WELFARE (REAL) - OTHER SOURCES,"

NCOLUMNS = 0
i = 0
Do
    i = InStr(i + 1, HEADINGS_STR, ",")
    NCOLUMNS = NCOLUMNS + 1
Loop Until i = 0
NCOLUMNS = NCOLUMNS - 1

'NROWS = CONTRACT_LENGTH_VAL + 1
ReDim TEMP_MATRIX(0 To CONTRACT_LENGTH_VAL + 1, 1 To NCOLUMNS)
i = 1
For k = 1 To NCOLUMNS
    j = InStr(i, HEADINGS_STR, ",")
    TEMP_MATRIX(0, k) = Mid(HEADINGS_STR, i, j - i)
    i = j + 1
Next k

Return

INPUTS_LINE:

'STEP 2: ASSIGN INPUT VARIABLES HERE
NA_STR = "#N/A"
DIV0_STR = "#DIV/0!"
INPUTS_ARR = INPUTS_RNG
'If UBound(INPUTS_ARR) = 1 Then
'    INPUTS_ARR = MATRIX_TRANSPOSE_FUNC(INPUTS_ARR)
'End If
h = 0: CONTRACT_LENGTH_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: INFLATION_CURRENT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: INFLATION_SPEED_ADJUSTMENT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: INFLATION_LONG_TERM_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: INFLATION_VOLATILITY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: INFLATION_INITIAL_CPI_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: INFLATION_INITIAL_DEFLATION_FACTOR_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: EXCHANGE_RATE_CURRENT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: EXCHANGE_RATE_DEPRECIATION_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: EXCHANGE_RATE_VOLATILITY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: DISCOUNT_INITIAL_FACTOR_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: DISCOUNT_RATE_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: CUSTOMERS_CURRENT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1) 'Number of
'potential customers
h = h + 1: CUSTOMERS_ANNUAL_GROWTH_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: SERVICE_COVERAGE_CURRENT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
'Existing service coverage: Current service coverage is the number of households that
'are currently connected divided by the total number of households.

h = h + 1: SERVICE_COVERAGE_TARGET_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
'Coverage extension target coverage. Existing service coverage is 50%

h = h + 1: SERVICE_COVERAGE_YEAR_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
'Year in which service target is to be achieved

h = h + 1: DEMAND_CURRENT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: DEMAND_OTHER_SOURCES_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: DEMAND_ANNUAL_GROWTH_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: DEMAND_VOLATILITY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: DENOMINATIONS_WATER_VOLUMES_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: NON_REVENUE_WATER_CURRENT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: NON_REVENUE_WATER_TARGET_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: NON_REVENUE_WATER_YEAR_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: COLLECTION_RATE_CURRENT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: COLLECTION_RATE_TARGET_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: COLLECTION_RATE_YEAR_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: DENOMINATIONS_MONETARY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: INVESTMENT_COST_PER_NEW_CONNECTION_LOCAL_CURRENCY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: FIXED_OPERATING_COSTS_EXISTING_PERCENT_INVESTMENT_COST_PER_CONNECTION_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: FIXED_OPERATING_COSTS_EXISTING_COST_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: FIXED_OPERATING_COSTS_ANNUAL_REAL_GROWTH_RATE_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: FIXED_OPERATING_COSTS_PROPORTION_OF_COSTS_DENOMINATED_IN_FOREIGN_CURRENCY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: VARIABLE_OPERATING_COSTS_EXISTING_COST_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: VARIABLE_OPERATING_COSTS_ANNUAL_REAL_GROWTH_RATE_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: VARIABLE_OPERATING_COSTS_PROPORTION_OF_COSTS_DENOMINATED_IN_FOREIGN_CURRENCY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: PERCENTAGE_FUNDED_BY_DEBT_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: LOAN_FOREIGN_CURRENCY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: LOAN_PERIOD_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: LOAN_PERIOD_GRACE_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_CONTRACTING_AUTHORITY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: INTEREST_RATE_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: ASSET_BASE_INITIAL_LOCAL_CURRENCY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: ASSET_BASE_DEPRECIATION_RATE_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: TARIFF_REVIEW_PERIOD_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: ANNUAL_FIXED_FEES_PAYMENT_LOCAL_CURRENCY_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

'Existing tariff (avg)
h = h + 1: EXISTING_TARIFF_CONNECTED_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: EXISTING_TARIFF_OTHER_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: EXISTING_TARIFF_COPYING_COST_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)

h = h + 1: WTP_CONNECTION_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: WTP_OTHER_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)
h = h + 1: WTP_COPYING_COST_VAL = INPUTS_ARR(LBound(INPUTS_ARR) + h, 1)


Return

CALCS_LINE:

'STEP 3: BUILD THE TEMP MATRIX (OUTPUT MATRIX)
i = 1: k = i - 1
TEMP_MATRIX(i, 1) = k
TEMP_MATRIX(i, 2) = INFLATION_CURRENT_VAL 'Inflation_Cur
TEMP_MATRIX(i, 3) = INFLATION_INITIAL_CPI_VAL 'CPI_Cur
TEMP_MATRIX(i, 4) = INFLATION_INITIAL_DEFLATION_FACTOR_VAL

TEMP_MATRIX(i, 5) = EXCHANGE_RATE_CURRENT_VAL
TEMP_MATRIX(i, 6) = TEMP_MATRIX(i, 5) * (1 + TEMP_MATRIX(i, 2))
TEMP_MATRIX(i, 7) = DISCOUNT_INITIAL_FACTOR_VAL

TEMP_MATRIX(i, 8) = CUSTOMERS_CURRENT_VAL

TEMP_MATRIX(i, 9) = SERVICE_COVERAGE_CURRENT_VAL
TEMP_MATRIX(i, 10) = Int(TEMP_MATRIX(i, 8) * TEMP_MATRIX(i, 9))
TEMP_MATRIX(i, 11) = 0 'New connections

TEMP_MATRIX(i, 12) = DEMAND_CURRENT_VAL
TEMP_MATRIX(i, 92) = TEMP_MATRIX(i, 12)
TEMP_MATRIX(i, 93) = DEMAND_OTHER_SOURCES_VAL

TEMP_MATRIX(i, 13) = TEMP_MATRIX(i, 12) * TEMP_MATRIX(i, 10) * 365 / 1000 / DENOMINATIONS_WATER_VOLUMES_VAL
'Total demand, expressed in millions of cubic meters is: Demand * 365 days / 1000 / 1000000
DDEMAND_VAL = TEMP_MATRIX(i, 12)
TDEMAND_VAL = DDEMAND_VAL * TEMP_MATRIX(i, 10) * 365 / 1000 / DENOMINATIONS_WATER_VOLUMES_VAL

TEMP_MATRIX(i, 14) = NON_REVENUE_WATER_CURRENT_VAL
TEMP_MATRIX(i, 15) = COLLECTION_RATE_CURRENT_VAL

'Opex_Fixed
TEMP_VAL = FIXED_OPERATING_COSTS_EXISTING_PERCENT_INVESTMENT_COST_PER_CONNECTION_VAL * _
            INVESTMENT_COST_PER_NEW_CONNECTION_LOCAL_CURRENCY_VAL * _
            SERVICE_COVERAGE_CURRENT_VAL * _
            CUSTOMERS_CURRENT_VAL

TEMP_MATRIX(i, 16) = (TEMP_VAL / DENOMINATIONS_MONETARY_VAL) * (1 - FIXED_OPERATING_COSTS_PROPORTION_OF_COSTS_DENOMINATED_IN_FOREIGN_CURRENCY_VAL)
TEMP_MATRIX(i, 17) = (TEMP_VAL / DENOMINATIONS_MONETARY_VAL) * FIXED_OPERATING_COSTS_PROPORTION_OF_COSTS_DENOMINATED_IN_FOREIGN_CURRENCY_VAL / EXCHANGE_RATE_CURRENT_VAL

TEMP_MATRIX(i, 18) = VARIABLE_OPERATING_COSTS_EXISTING_COST_VAL * (1 - VARIABLE_OPERATING_COSTS_PROPORTION_OF_COSTS_DENOMINATED_IN_FOREIGN_CURRENCY_VAL)
TEMP_MATRIX(i, 19) = VARIABLE_OPERATING_COSTS_EXISTING_COST_VAL * VARIABLE_OPERATING_COSTS_PROPORTION_OF_COSTS_DENOMINATED_IN_FOREIGN_CURRENCY_VAL / EXCHANGE_RATE_CURRENT_VAL
For j = 20 To 68: TEMP_MATRIX(i, j) = "": Next j
TEMP_MATRIX(i, 22) = 0 'To avoid the error of SUM = SUM + ""
TEMP_MATRIX(i, 23) = 0 'To avoid the error of SUM = SUM + ""
TEMP_MATRIX(i, 24) = 0 'To avoid the error of SUM = SUM + ""
TEMP_MATRIX(i, 45) = 0 'To avoid the error of SUM = SUM + ""

-------
If RISK_FLAG = False Then 'With No-Risk
-------
    TEMP_MATRIX(i, 32) = NA_STR
    TEMP_MATRIX(i, 33) = NA_STR
-------
Else 'With Risk
-------
    TEMP_MATRIX(i, 32) = TEMP_MATRIX(i, 2)
    TEMP_MATRIX(i, 33) = 1
-------
End If
-------

TEMP_MATRIX(i, 37) = ASSET_BASE_INITIAL_LOCAL_CURRENCY_VAL / DENOMINATIONS_MONETARY_VAL
TEMP_MATRIX(i, 41) = 0

-------
TEMP1_SUM = 0: TEMP2_SUM = 0: TEMP3_SUM = 0
-------
For i = 2 To CONTRACT_LENGTH_VAL + 1
    k = i - 1
    TFLAG1_VAL = ((TARIFF_REVIEW_PERIOD_VAL = 1) Or (k Mod TARIFF_REVIEW_PERIOD_VAL) = 1)
    TFLAG2_VAL = k Mod TARIFF_REVIEW_PERIOD_VAL = 1
    TEMP_MATRIX(i, 1) = k


    If RISK_FLAG = False Then 'With No-Risk

        TEMP_MATRIX(i, 2) = MACRO_FORECAST_FUNC(TEMP_MATRIX(k, 2), INFLATION_LONG_TERM_VAL, INFLATION_SPEED_ADJUSTMENT_VAL, "", "", 0)
        'TEMP_MATRIX(k, 2) * Exp(INFLATION_SPEED_ADJUSTMENT_VAL * (INFLATION_LONG_TERM_VAL - TEMP_MATRIX(k, 2)))
        TEMP_MATRIX(i, 5) = TEMP_MATRIX(k, 5) * Exp(EXCHANGE_RATE_DEPRECIATION_VAL)
        TEMP_MATRIX(i, 12) = TEMP_MATRIX(k, 12) * Exp(DEMAND_ANNUAL_GROWTH_VAL)
        TEMP_MATRIX(i, 92) = TEMP_MATRIX(i, 12)
        TEMP_MATRIX(i, 93) = TEMP_MATRIX(k, 93) * Exp(DEMAND_ANNUAL_GROWTH_VAL)

    Else 'With Risk

        RANDOM_VAL = Range("RAND_RNG1").Cells(i) 'Once the model is built and perfect,
        'we dont need the RANDOM Variable since the function MACRO_FORECAST_FUNC
        'already uses the RANDOM_NORMAL_FAST_FUNC(). Therefore, we should "" for the
        'input variable NORMAL_RANDOM_VAL once we call the function MACRO_FORECAST_FUNC
        TEMP_MATRIX(i, 2) = MACRO_FORECAST_FUNC(TEMP_MATRIX(k, 2), _
                            INFLATION_LONG_TERM_VAL, _
                            INFLATION_SPEED_ADJUSTMENT_VAL, INFLATION_VOLATILITY_VAL, _
                            RANDOM_VAL, 0)
    
        RANDOM_VAL = Range("RAND_RNG2").Cells(i)
        TEMP_MATRIX(i, 5) = MACRO_FORECAST_FUNC(TEMP_MATRIX(k, 5), _
                            EXCHANGE_RATE_DEPRECIATION_VAL, _
                            0, EXCHANGE_RATE_VOLATILITY_VAL, RANDOM_VAL, 1)

        RANDOM_VAL = Range("RAND_RNG3").Cells(i)
        TEMP_MATRIX(i, 12) = MACRO_FORECAST_FUNC(TEMP_MATRIX(k, 12), _
                            DEMAND_ANNUAL_GROWTH_VAL, _
                            0, DEMAND_VOLATILITY_VAL, RANDOM_VAL, 1)
        TEMP_MATRIX(i, 92) = TEMP_MATRIX(i, 12)
        TEMP_MATRIX(i, 93) = MACRO_FORECAST_FUNC(TEMP_MATRIX(k, 93), _
                            DEMAND_ANNUAL_GROWTH_VAL, _
                            0, DEMAND_VOLATILITY_VAL, RANDOM_VAL, 1)

    End If


    TEMP_MATRIX(i, 3) = TEMP_MATRIX(k, 3) * Exp(TEMP_MATRIX(i, 2))
    TEMP_MATRIX(i, 4) = TEMP_MATRIX(k, 4) * Exp(-TEMP_MATRIX(i, 2))
    
    TEMP_MATRIX(i, 6) = TEMP_MATRIX(i, 5) * (1 + TEMP_MATRIX(i, 2))
    
    TEMP_MATRIX(i, 7) = TEMP_MATRIX(k, 7) * Exp(-DISCOUNT_RATE_VAL)
    
    TEMP_MATRIX(i, 8) = TEMP_MATRIX(k, 8) * Exp(CUSTOMERS_ANNUAL_GROWTH_VAL)
    'Potential Connections
    
    TEMP_MATRIX(i, 9) = LOGISTIC_CURVE_FUNC(SERVICE_COVERAGE_CURRENT_VAL, _
                         SERVICE_COVERAGE_TARGET_VAL, TEMP_MATRIX(i, 1), _
                         SERVICE_COVERAGE_YEAR_VAL)

    TEMP_MATRIX(i, 10) = Int(TEMP_MATRIX(i, 8) * TEMP_MATRIX(i, 9))
    
    If TEMP_MATRIX(i, 10) > TEMP_MATRIX(k, 10) Then
    'New connections over a year is the difference between Connections in the current
    'period and Connections in the previous period.
        TEMP_MATRIX(i, 11) = TEMP_MATRIX(i, 10) - TEMP_MATRIX(k, 10)
    Else
        TEMP_MATRIX(i, 11) = 0
    End If
    TEMP_MATRIX(i, 13) = TEMP_MATRIX(i, 12) * TEMP_MATRIX(i, 10) * 365 / 1000 / DENOMINATIONS_WATER_VOLUMES_VAL
    'Total demand, expressed in millions of cubic meters is: Demand * 365 days / 1000 / 1000000

    TEMP_MATRIX(i, 14) = LOGISTIC_CURVE_FUNC(NON_REVENUE_WATER_CURRENT_VAL, _
                         NON_REVENUE_WATER_TARGET_VAL, TEMP_MATRIX(i, 1), _
                         NON_REVENUE_WATER_YEAR_VAL)

    TEMP_MATRIX(i, 15) = LOGISTIC_CURVE_FUNC(COLLECTION_RATE_CURRENT_VAL, _
                         COLLECTION_RATE_TARGET_VAL, TEMP_MATRIX(i, 1), _
                         COLLECTION_RATE_YEAR_VAL)

    TEMP_MATRIX(i, 16) = TEMP_MATRIX(k, 16) * Exp(FIXED_OPERATING_COSTS_ANNUAL_REAL_GROWTH_RATE_VAL)
    TEMP_MATRIX(i, 17) = TEMP_MATRIX(k, 17) * Exp(FIXED_OPERATING_COSTS_ANNUAL_REAL_GROWTH_RATE_VAL)
    TEMP_MATRIX(i, 18) = TEMP_MATRIX(k, 18) * Exp(VARIABLE_OPERATING_COSTS_ANNUAL_REAL_GROWTH_RATE_VAL)
    TEMP_MATRIX(i, 19) = TEMP_MATRIX(k, 19) * Exp(VARIABLE_OPERATING_COSTS_ANNUAL_REAL_GROWTH_RATE_VAL)

    If TEMP_MATRIX(i, 4) * DENOMINATIONS_MONETARY_VAL = 0 Then '#DIV/0!
        For j = 20 To 28: TEMP_MATRIX(i, j) = "": Next j
    Else
        TEMP_MATRIX(i, 20) = TEMP_MATRIX(i, 11) * INVESTMENT_COST_PER_NEW_CONNECTION_LOCAL_CURRENCY_VAL / (TEMP_MATRIX(i, 4) * DENOMINATIONS_MONETARY_VAL)
        TEMP_MATRIX(i, 21) = PERCENTAGE_FUNDED_BY_DEBT_VAL * TEMP_MATRIX(i, 20)
        If LOAN_FOREIGN_CURRENCY_VAL = True Then
            TEMP_MATRIX(1, 22) = TEMP_MATRIX(1, 22) + TEMP_MATRIX(i, 21) / TEMP_MATRIX(i, 5)
            For j = 2 To i 'Amortization Schedule
                TEMP_VAL = TEMP_MATRIX(j, 21) / TEMP_MATRIX(j, 5)
                TEMP_MATRIX(i, 22) = TEMP_MATRIX(i, 22) + TEMP_VAL / LOAN_PERIOD_VAL
            Next j
            TEMP_VAL = TEMP_MATRIX(i, 5)
            TEMP_MATRIX(i, 23) = TEMP_MATRIX(k, 23) - TEMP_MATRIX(k, 24) + TEMP_MATRIX(i, 21) / TEMP_MATRIX(i, 5)
        Else
            TEMP_MATRIX(1, 22) = TEMP_MATRIX(1, 22) + TEMP_MATRIX(i, 21) / 1
            For j = 2 To i 'Amortization Schedule
                TEMP_VAL = TEMP_MATRIX(j, 21) / 1
                TEMP_MATRIX(i, 22) = TEMP_MATRIX(i, 22) + TEMP_VAL / LOAN_PERIOD_VAL
            Next j
            TEMP_VAL = 1
            TEMP_MATRIX(i, 23) = TEMP_MATRIX(k, 23) - TEMP_MATRIX(k, 24) + TEMP_MATRIX(i, 21) / 1
        End If
        TEMP_MATRIX(i, 24) = TEMP_MATRIX(i, 22)
        TEMP_MATRIX(i, 25) = TEMP_MATRIX(i, 23) * INTEREST_RATE_VAL
        If k <= LOAN_PERIOD_GRACE_VAL Then
            For j = 26 To 28
                TEMP_MATRIX(i, j) = 0
            Next j
        Else
            For j = 26 To 28
                TEMP_MATRIX(i, j) = TEMP_MATRIX(i - LOAN_PERIOD_GRACE_VAL, j - 3) * TEMP_VAL * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL
            Next j
            For j = 29 To 31
                TEMP_MATRIX(i, j) = TEMP_MATRIX(i - LOAN_PERIOD_GRACE_VAL, j - 6) * TEMP_VAL * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_CONTRACTING_AUTHORITY_VAL
            Next j
        End If
    End If
        
    TEMP_MATRIX(i, 34) = TEMP_MATRIX(k, 37)
    TEMP_MATRIX(i, 35) = TEMP_MATRIX(i, 34) * ASSET_BASE_DEPRECIATION_RATE_VAL
    -------
    If RISK_FLAG = False Then 'With No-Risk
    -------
        TEMP_VAL = TEMP_MATRIX(i, 4)
        TEMP_MATRIX(i, 32) = NA_STR
        TEMP_MATRIX(i, 33) = NA_STR
        TEMP_MATRIX(i, 37) = TEMP_MATRIX(i, 34) * Exp(TEMP_MATRIX(i, 2))
        TEMP_MATRIX(i, 39) = TEMP_MATRIX(i, 20)
        TEMP_MATRIX(i, 42) = NA_STR
        TEMP_MATRIX(i, 43) = NA_STR
        TEMP_MATRIX(i, 44) = TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 7)
        TEMP_MATRIX(i, 52) = (TEMP_MATRIX(i, 16) + TEMP_MATRIX(i, 18) * TEMP_MATRIX(i, 13) / (1 - TEMP_MATRIX(i, 14)))
        TEMP_MATRIX(i, 53) = (TEMP_MATRIX(i, 17) + TEMP_MATRIX(i, 19) * TEMP_MATRIX(i, 13) / (1 - TEMP_MATRIX(i, 14))) * TEMP_MATRIX(i, 5)
        TEMP_MATRIX(i, 54) = NA_STR
        TEMP_MATRIX(i, 55) = NA_STR
    -------
    Else 'With Risk
    -------
        If k > 1 Then
            If TFLAG1_VAL Then
                TEMP_MATRIX(i, 32) = TEMP_MATRIX(i, 2)
            Else
                TEMP_MATRIX(i, 32) = MACRO_FORECAST_FUNC(TEMP_MATRIX(k, 32), INFLATION_LONG_TERM_VAL, INFLATION_SPEED_ADJUSTMENT_VAL, "", "", 0)
            End If
            If TDEMAND_VAL = 0 Then
                TEMP_MATRIX(i, 42) = TEMP_MATRIX(k, 42)
            Else
                TEMP_MATRIX(i, 42) = TEMP_MATRIX(k, 42) / TEMP_MATRIX(k, 10) * Exp(DEMAND_ANNUAL_GROWTH_VAL) * TEMP_MATRIX(i, 10)
            End If
            If TFLAG2_VAL Then
                TEMP_MATRIX(i, 37) = TEMP_MATRIX(k, 37) * Exp(TEMP_MATRIX(i, 2))
                TEMP_MATRIX(i, 43) = TEMP_MATRIX(i, 13)
                TEMP_MATRIX(i, 55) = TEMP_MATRIX(i, 5)
            Else
                TEMP_MATRIX(i, 37) = TEMP_MATRIX(k, 37) * Exp(TEMP_MATRIX(i, 32))
                TEMP_MATRIX(i, 43) = TEMP_MATRIX(k, 43) / TEMP_MATRIX(k, 10) * Exp(DEMAND_ANNUAL_GROWTH_VAL) * TEMP_MATRIX(i, 10)
                TEMP_MATRIX(i, 55) = TEMP_MATRIX(k, 55) * Exp(EXCHANGE_RATE_DEPRECIATION_VAL)
            End If
            TEMP_MATRIX(i, 54) = TEMP_MATRIX(k, 54) * Exp(EXCHANGE_RATE_DEPRECIATION_VAL)
        Else
            TEMP_MATRIX(i, 32) = MACRO_FORECAST_FUNC(TEMP_MATRIX(k, 32), INFLATION_LONG_TERM_VAL, INFLATION_SPEED_ADJUSTMENT_VAL, "", "", 0)
            TEMP_MATRIX(i, 37) = TEMP_MATRIX(i, 34) * Exp(TEMP_MATRIX(i, 32))
            TEMP_MATRIX(i, 42) = (DDEMAND_VAL * Exp(DEMAND_ANNUAL_GROWTH_VAL)) * TEMP_MATRIX(i, 10) * 365 / 1000 / DENOMINATIONS_WATER_VOLUMES_VAL
            TEMP_MATRIX(i, 43) = TEMP_MATRIX(i, 42)
            TEMP_MATRIX(i, 54) = EXCHANGE_RATE_CURRENT_VAL * Exp(EXCHANGE_RATE_DEPRECIATION_VAL)
            TEMP_MATRIX(i, 55) = TEMP_MATRIX(i, 54)
        End If
    
        DDEMAND_VAL = DDEMAND_VAL * Exp(DEMAND_ANNUAL_GROWTH_VAL)
        TDEMAND_VAL = DDEMAND_VAL * TEMP_MATRIX(i, 10) * 365 / 1000 / DENOMINATIONS_WATER_VOLUMES_VAL
        TEMP_MATRIX(i, 33) = TEMP_MATRIX(k, 33) * Exp(-TEMP_MATRIX(i, 32))
        TEMP_MATRIX(i, 39) = TEMP_MATRIX(i, 11) * INVESTMENT_COST_PER_NEW_CONNECTION_LOCAL_CURRENCY_VAL / (TEMP_MATRIX(i, 33) * DENOMINATIONS_MONETARY_VAL)
        TEMP_MATRIX(i, 44) = TEMP_MATRIX(i, 43) * TEMP_MATRIX(i, 7)
        TEMP_VAL = TEMP_MATRIX(i, 33)
        TEMP_MATRIX(i, 52) = NA_STR
        TEMP_MATRIX(i, 53) = NA_STR
    -------
    End If
    -------
    TEMP1_SUM = TEMP1_SUM + TEMP_MATRIX(i, 44)

    TEMP_MATRIX(i, 36) = TEMP_MATRIX(i, 37) - TEMP_MATRIX(i, 34) + TEMP_MATRIX(i, 35)

    TEMP_MATRIX(i, 38) = TEMP_MATRIX(k, 41)
    TEMP_MATRIX(i, 40) = (TEMP_MATRIX(i, 38) + TEMP_MATRIX(i, 39)) * ASSET_BASE_DEPRECIATION_RATE_VAL
    TEMP_MATRIX(i, 41) = TEMP_MATRIX(i, 38) + TEMP_MATRIX(i, 39) - TEMP_MATRIX(i, 40)
    
    TEMP_MATRIX(i, 47) = DISCOUNT_RATE_VAL * (TEMP_MATRIX(i, 38) + TEMP_MATRIX(i, 39)) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_CONTRACTING_AUTHORITY_VAL
    TEMP_MATRIX(i, 48) = DISCOUNT_RATE_VAL * (TEMP_MATRIX(i, 38) + TEMP_MATRIX(i, 39)) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL
    
    TEMP_MATRIX(i, 49) = TEMP_MATRIX(i, 40) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_CONTRACTING_AUTHORITY_VAL * TEMP_VAL
    TEMP_MATRIX(i, 50) = TEMP_MATRIX(i, 40) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL * TEMP_VAL
    
    TEMP_MATRIX(i, 51) = TEMP_MATRIX(i, 36) * TEMP_VAL
    TEMP_MATRIX(i, 56) = ANNUAL_FIXED_FEES_PAYMENT_LOCAL_CURRENCY_VAL
    
    
    'Revenue requirement (real): Annual revenue requirement for the two parties. The contracting
    'authority collects the return and depreciation on existing assets and new assets. The
    'operator collects all other cost items.
    TEMP_MATRIX(i, 57) = TEMP_MATRIX(i, 47) + TEMP_MATRIX(i, 49) - TEMP_MATRIX(i, 56)
    TEMP_MATRIX(i, 60) = TEMP_MATRIX(i, 48) + TEMP_MATRIX(i, 50) + TEMP_MATRIX(i, 51)
    If RISK_FLAG = False Then 'With No-Risk
        TEMP_MATRIX(i, 60) = _
            TEMP_MATRIX(i, 60) + _
            TEMP_MATRIX(i, 52) + _
            TEMP_MATRIX(i, 53)
    Else 'With Risk
        TEMP_MATRIX(i, 60) = _
            TEMP_MATRIX(i, 60) + _
            TEMP_MATRIX(i, 16) + _
            TEMP_MATRIX(i, 18) * TEMP_MATRIX(i, 43) / (1 - TEMP_MATRIX(i, 14)) + _
            TEMP_MATRIX(i, 17) * TEMP_MATRIX(i, 55) + _
            TEMP_MATRIX(i, 19) * (TEMP_MATRIX(i, 43) / (1 - TEMP_MATRIX(i, 14))) * TEMP_MATRIX(i, 55)
    End If
    
    TEMP_MATRIX(i, 58) = TEMP_MATRIX(i, 57) * TEMP_MATRIX(i, 7)
    TEMP2_SUM = TEMP2_SUM + TEMP_MATRIX(i, 58)
    
    TEMP_MATRIX(i, 61) = TEMP_MATRIX(i, 60) * TEMP_MATRIX(i, 7)
    TEMP3_SUM = TEMP3_SUM + TEMP_MATRIX(i, 61)
    
    If TFLAG1_VAL Then
        TEMP_MATRIX(i, 45) = TEMP_MATRIX(i, 44)
        TEMP_MATRIX(i, 59) = TEMP_MATRIX(i, 58)
        TEMP_MATRIX(i, 62) = TEMP_MATRIX(i, 61)
    Else
        TEMP_MATRIX(i, 45) = TEMP_MATRIX(k, 45) + TEMP_MATRIX(i, 44)
        TEMP_MATRIX(i, 59) = TEMP_MATRIX(k, 59) + TEMP_MATRIX(i, 58)
        TEMP_MATRIX(i, 62) = TEMP_MATRIX(k, 62) + TEMP_MATRIX(i, 61)
    End If

Next i
'-------------------------------------------------------------------------------


For i = 1 To CONTRACT_LENGTH_VAL + 1
'=IF(Year>Contract_Length,"",IF(Year<INT(Contract_Length/Tariff_Period)*Tariff_Period,IF(MOD(Year,Tariff_Period)=0,INDEX(110:110,1,COLUMN()+Tariff_Period),),IF(Year=INT(Contract_Length/Tariff_Period)*Tariff_Period,INDEX(110:110,1,Contract_Length+4),)))
'=IF(Year>Contract_Length,"",IF(Year<INT(Contract_Length/Tariff_Period)*Tariff_Period,IF(MOD(Year,Tariff_Period)=0,INDEX(129:129,1,COLUMN()+Tariff_Period),),IF(Year=INT(Contract_Length/Tariff_Period)*Tariff_Period,INDEX(129:129,1,Contract_Length+4),)))
'=IF(Year>Contract_Length,"",IF(Year<INT(Contract_Length/Tariff_Period)*Tariff_Period,IF(MOD(Year,Tariff_Period)=0,INDEX(133:133,1,COLUMN()+Tariff_Period),),IF(Year=INT(Contract_Length/Tariff_Period)*Tariff_Period,INDEX(133:133,1,Contract_Length+4),)))

    k = i - 1
    TFLAG1_VAL = ((TARIFF_REVIEW_PERIOD_VAL = 1) Or (k Mod TARIFF_REVIEW_PERIOD_VAL) = 1)
    TFLAG2_VAL = k Mod TARIFF_REVIEW_PERIOD_VAL = 0
    
    l = Int(CONTRACT_LENGTH_VAL / TARIFF_REVIEW_PERIOD_VAL) * TARIFF_REVIEW_PERIOD_VAL
    
    '46 -> Demand is discounted at the beginning of each reset period for the following
    'reset period. This is used as the denominator in the tariff reset calculations.
    
    '63 & 64 -> Discounted revenue requirement: Revenue requirement is discounted at the
    'beginning of each reset period for the following reset period. This is used as the
    'numerator in the tariff reset calculations.

    If k < l Then
        If TFLAG2_VAL Then
            TEMP_MATRIX(i, 46) = TEMP_MATRIX(i + TARIFF_REVIEW_PERIOD_VAL, 45)
            TEMP_MATRIX(i, 63) = TEMP_MATRIX(i + TARIFF_REVIEW_PERIOD_VAL, 59)
            TEMP_MATRIX(i, 64) = TEMP_MATRIX(i + TARIFF_REVIEW_PERIOD_VAL, 62)
        Else
            TEMP_MATRIX(i, 46) = 0
            TEMP_MATRIX(i, 63) = 0
            TEMP_MATRIX(i, 64) = 0
        End If
    Else
        If k = l Then
            TEMP_MATRIX(i, 46) = TEMP_MATRIX(CONTRACT_LENGTH_VAL + 1, 45)
            TEMP_MATRIX(i, 63) = TEMP_MATRIX(CONTRACT_LENGTH_VAL + 1, 59)
            TEMP_MATRIX(i, 64) = TEMP_MATRIX(CONTRACT_LENGTH_VAL + 1, 62)
        Else
            TEMP_MATRIX(i, 46) = 0
            TEMP_MATRIX(i, 63) = 0
            TEMP_MATRIX(i, 64) = 0
        End If
    End If
    '65 to 68 -> Revenue required per m3: Revenue required per cubic meter is the
    'discounted revenue requirement divided by discounted demand.
    
    '69 to 73 -> Tariff Indexation: Revenue required determined in real terms, so
    'tariff indexation, if chosen, allows the tariffs to increase at the rate of
    'inflation. Tariffs calculated here are in nominal terms.
    
    '74 to 83 -> Profit: The tariff reset methodology above allows the operator to earn
    'zero profit in real terms over the reset period (the methodology has already allowed
    'for a return on its investments).

    '84 to 87 -> Cash Flows: Present value of cash flows to the operator and the contracting
    'authority, expressed in millions of pesos.

    '88 to 91 -> Debt-service ratio is the total cash flow of the operator divided by
    'financing costs. If the operator has no responsibility in the financing of coverage
    'extension, this ratio is undefined.

    If TEMP_MATRIX(i, 4) <> 0 Then
        TEMP_MATRIX(i, 69) = 1 / TEMP_MATRIX(i, 4)
    Else
        TEMP_MATRIX(i, 69) = DIV0_STR
    End If
    If TEMP1_SUM <> 0 Then
        TEMP_MATRIX(i, 65) = TEMP2_SUM / TEMP1_SUM
        TEMP_MATRIX(i, 66) = TEMP3_SUM / TEMP1_SUM
        If k > 0 Then
            If TFLAG1_VAL Then
                If TEMP_MATRIX(k, 46) = 0 Then
                    TEMP_MATRIX(i, 67) = DIV0_STR
                    TEMP_MATRIX(i, 68) = DIV0_STR
                    TEMP_MATRIX(i, 72) = DIV0_STR
                    TEMP_MATRIX(i, 73) = DIV0_STR
                Else
                    TEMP_MATRIX(i, 67) = TEMP_MATRIX(k, 63) / TEMP_MATRIX(k, 46)
                    TEMP_MATRIX(i, 68) = TEMP_MATRIX(k, 64) / TEMP_MATRIX(k, 46)
                End If
            Else
                TEMP_MATRIX(i, 67) = TEMP_MATRIX(k, 67)
                TEMP_MATRIX(i, 68) = TEMP_MATRIX(k, 68)
            End If
            If TEMP_MATRIX(i, 69) <> DIV0_STR Then
                TEMP_MATRIX(i, 70) = TEMP_MATRIX(i, 65) * TEMP_MATRIX(i, 69)
                TEMP_MATRIX(i, 71) = TEMP_MATRIX(i, 66) * TEMP_MATRIX(i, 69)
                TEMP_MATRIX(i, 72) = TEMP_MATRIX(i, 67) * TEMP_MATRIX(i, 69)
                TEMP_MATRIX(i, 73) = TEMP_MATRIX(i, 68) * TEMP_MATRIX(i, 69)
                TEMP_MATRIX(i, 94) = (TEMP_MATRIX(i, 72) + TEMP_MATRIX(i, 73)) * TEMP_MATRIX(i, 92)

                '74 to 75: Total revenue collected is Tariff (in nominal terms) * Billed demand * Collection rate.
                TEMP_MATRIX(i, 74) = (TEMP_MATRIX(i, 70) + TEMP_MATRIX(i, 71)) * TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 15)
                TEMP_MATRIX(i, 75) = (TEMP_MATRIX(i, 72) + TEMP_MATRIX(i, 73)) * TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 15)
                
                '76 to 81: Cost items included in the revenue requirement.
                If RISK_FLAG = False Then 'With No-Risk
                    TEMP_MATRIX(i, 76) = (TEMP_MATRIX(i, 52) + TEMP_MATRIX(i, 53)) * TEMP_MATRIX(i, 69)
                Else 'With Risk
                    TEMP_MATRIX(i, 76) = _
                        (TEMP_MATRIX(i, 16) + TEMP_MATRIX(i, 18) * TEMP_MATRIX(i, 13) / (1 - TEMP_MATRIX(i, 14)) + _
                        (TEMP_MATRIX(i, 17) + TEMP_MATRIX(i, 19) * TEMP_MATRIX(i, 13) / (1 - TEMP_MATRIX(i, 14))) * TEMP_MATRIX(i, 5)) * TEMP_MATRIX(i, 69)
                End If
                TEMP_MATRIX(i, 77) = TEMP_MATRIX(i, 51) * TEMP_MATRIX(i, 69)
                TEMP_MATRIX(i, 78) = (TEMP_MATRIX(i, 47) + TEMP_MATRIX(i, 48)) * TEMP_MATRIX(i, 69)
                TEMP_MATRIX(i, 79) = (TEMP_MATRIX(i, 49) + TEMP_MATRIX(i, 50)) * TEMP_MATRIX(i, 69)
                TEMP_MATRIX(i, 80) = -TEMP_MATRIX(i, 56) * TEMP_MATRIX(i, 69)
                For j = 76 To 80: TEMP_MATRIX(i, 81) = TEMP_MATRIX(i, 81) + TEMP_MATRIX(i, j): Next j
                
                '82 to 83: Check that the sum of NPV profit in real terms is equal to zero.
                TEMP_MATRIX(i, 82) = (TEMP_MATRIX(i, 74) - TEMP_MATRIX(i, 81)) * TEMP_MATRIX(i, 4) * TEMP_MATRIX(i, 7)
                TEMP_MATRIX(i, 83) = (TEMP_MATRIX(i, 75) - TEMP_MATRIX(i, 81)) * TEMP_MATRIX(i, 4) * TEMP_MATRIX(i, 7)
            
            
                '84 to 87 -> Cash Flows: Present value of cash flows to the operator and the contracting
                'authority, expressed in millions of pesos.

                TEMP_VAL = TEMP_MATRIX(i, 7) * TEMP_MATRIX(i, 4)
                TEMP_MATRIX(i, 84) = TEMP_VAL * (TEMP_MATRIX(i, 70) * TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 15) - TEMP_MATRIX(i, 30) - TEMP_MATRIX(i, 31) - (TEMP_MATRIX(i, 20) - TEMP_MATRIX(i, 21)) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_CONTRACTING_AUTHORITY_VAL)
                TEMP_MATRIX(i, 86) = TEMP_VAL * (TEMP_MATRIX(i, 72) * TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 15) - TEMP_MATRIX(i, 30) - TEMP_MATRIX(i, 31) - (TEMP_MATRIX(i, 20) - TEMP_MATRIX(i, 21)) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_CONTRACTING_AUTHORITY_VAL)
                
                TEMP_MATRIX(i, 85) = TEMP_VAL * (TEMP_MATRIX(i, 71) * TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 15) - (TEMP_MATRIX(i, 76) + TEMP_MATRIX(i, 77) + TEMP_MATRIX(i, 27) + TEMP_MATRIX(i, 28) + (TEMP_MATRIX(i, 20) - TEMP_MATRIX(i, 21)) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL))
                TEMP_MATRIX(i, 87) = TEMP_VAL * (TEMP_MATRIX(i, 73) * TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 15) - (TEMP_MATRIX(i, 76) + TEMP_MATRIX(i, 77) + TEMP_MATRIX(i, 27) + TEMP_MATRIX(i, 28) + (TEMP_MATRIX(i, 20) - TEMP_MATRIX(i, 21)) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL))
                
                '88 to 91 -> Debt-service ratio is the total cash flow of the operator divided by
                'financing costs. If the operator has no responsibility in the financing of coverage
                'extension, this ratio is undefined.

                TEMP_MATRIX(i, 88) = TEMP_MATRIX(i, 71) * TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 15) - (TEMP_MATRIX(i, 76) + TEMP_MATRIX(i, 77) + TEMP_MATRIX(i, 27) + (TEMP_MATRIX(i, 20) - TEMP_MATRIX(i, 21)) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL)
                TEMP_MATRIX(i, 89) = TEMP_MATRIX(i, 73) * TEMP_MATRIX(i, 13) * TEMP_MATRIX(i, 15) - (TEMP_MATRIX(i, 76) + TEMP_MATRIX(i, 77) + TEMP_MATRIX(i, 27) + (TEMP_MATRIX(i, 20) - TEMP_MATRIX(i, 21)) * FINANCING_RESPONSIBILITY_COVERAGE_EXTENSION_OPERATOR_VAL)
                
                If TEMP_MATRIX(i, 28) <> 0 Then
                    TEMP_MATRIX(i, 90) = TEMP_MATRIX(i, 88) / TEMP_MATRIX(i, 28)
                    TEMP_MATRIX(i, 91) = TEMP_MATRIX(i, 89) / TEMP_MATRIX(i, 28)
                Else
                    TEMP_MATRIX(i, 90) = DIV0_STR
                    TEMP_MATRIX(i, 91) = DIV0_STR
                End If
            Else
                For j = 70 To 91: TEMP_MATRIX(i, j) = DIV0_STR: Next j
                'For j = 94 To 102: TEMP_MATRIX(i, j) = DIV0_STR: Next j
            End If
        Else
            For j = 67 To 68: TEMP_MATRIX(i, j) = "": Next j
            For j = 70 To 91: TEMP_MATRIX(i, j) = "": Next j
            TEMP_MATRIX(i, 94) = EXISTING_TARIFF_CONNECTED_VAL * TEMP_MATRIX(i, 92)
        End If
        TEMP_MATRIX(i, 95) = EXISTING_TARIFF_CONNECTED_VAL * TEMP_MATRIX(i, 69) * TEMP_MATRIX(i, 92)
        TEMP_MATRIX(i, 96) = EXISTING_TARIFF_OTHER_VAL * TEMP_MATRIX(i, 93) / TEMP_MATRIX(i, 4)
        TEMP_MATRIX(i, 97) = EXISTING_TARIFF_COPYING_COST_VAL / TEMP_MATRIX(i, 4)
        
        'Willingness to pay
        TEMP_MATRIX(i, 98) = WTP_CONNECTION_VAL * EXISTING_TARIFF_CONNECTED_VAL * TEMP_MATRIX(i, 92) / TEMP_MATRIX(i, 4)
        TEMP_MATRIX(i, 99) = WTP_OTHER_VAL * EXISTING_TARIFF_OTHER_VAL * TEMP_MATRIX(i, 93) / TEMP_MATRIX(i, 4)
        TEMP_MATRIX(i, 100) = (WTP_COPYING_COST_VAL * EXISTING_TARIFF_COPYING_COST_VAL) / TEMP_MATRIX(i, 4)
        
        'Change in social welfare (Real)
        TEMP_MATRIX(i, 101) = (TEMP_MATRIX(i, 95) - TEMP_MATRIX(i, 94)) * TEMP_MATRIX(1, 10) * TEMP_MATRIX(i, 4) * _
                                TEMP_MATRIX(i, 7) / DENOMINATIONS_MONETARY_VAL

        TEMP_VAL = (TEMP_MATRIX(i, 99) + TEMP_MATRIX(i, 100) - TEMP_MATRIX(i, 96) - TEMP_MATRIX(i, 97) + TEMP_MATRIX(i, 98) - TEMP_MATRIX(i, 94)) * TEMP_MATRIX(i, 11) * TEMP_MATRIX(i, 4) * TEMP_MATRIX(i, 7) / DENOMINATIONS_MONETARY_VAL
        If k > 0 Then
            TEMP_MATRIX(i, 102) = TEMP_MATRIX(k, 102) + TEMP_VAL
        Else
            TEMP_MATRIX(i, 102) = TEMP_VAL
        End If
    Else
        For j = 65 To 68: TEMP_MATRIX(i, j) = DIV0_STR: Next j
        For j = 70 To 91: TEMP_MATRIX(i, j) = DIV0_STR: Next j
        'For j = 94 To 102: TEMP_MATRIX(i, j) = DIV0_STR: Next j
    End If
        

Next i



Return

ERROR_LABEL:
WATER_UTILITY_SAMPLING_FUNC = Err.Number
End Function
